<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计 on Feng Zhenbing's Blog</title><link>https://fengzhenbing.github.io/categories/%E8%AE%BE%E8%AE%A1/</link><description>Recent content in 设计 on Feng Zhenbing's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 19 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://fengzhenbing.github.io/categories/%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>开放平台appKey，appSecret设计</title><link>https://fengzhenbing.github.io/p/%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0appkeyappsecret%E8%AE%BE%E8%AE%A1/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0appkeyappsecret%E8%AE%BE%E8%AE%A1/</guid><description>开放平台appKey appSecret设计 1，手动注册客户端，服务端返回appKey appSecret 客户端和服务端都保存ak as 2, 客户端第一次请求 通过appKey请求token 服务端通过appKey，appSecret，时间戳，用户的必要信息生成token，可以使用JWTToken.
​ token具有有效期：Token是客户端访问服务端的凭证。
3，客户端后续请求 参数为： Token + 当前时间戳 + 参数 +签名sign1
签名sign1为 Token + 当前时间戳 + 参数+appSecret 按照一定签名算法比如 SHA256生成的签名字符串，为了保证请求中参数不被流量劫持篡改
4，服务端收到请求进行校验 时间戳校验：请求时间和当前服务端时间大于一定范围，比如5分钟，拒绝执行 Token解析：token过期拒绝执行 签名校验： 通过token解析获取到appKey，再获取到appSecret， 使用与客户端相同的签名算法SHA256得到签名sign2, 如果sign1不等于sign2，拒绝执行</description></item></channel></rss>