<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Feng Zhenbing's Blog</title><link>https://fengzhenbing.github.io/</link><description>Recent content on Feng Zhenbing's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://fengzhenbing.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>shardingsphere（5.0.0.beta）元数据上下文</title><link>https://fengzhenbing.github.io/p/shardingsphere5.0.0.beta%E5%85%83%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%B8%8B%E6%96%87/</link><pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/shardingsphere5.0.0.beta%E5%85%83%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%B8%8B%E6%96%87/</guid><description>&lt;h1 id="shardingsphere500beta源码学习-元数据上下文">Shardingsphere（5.0.0.beta）源码学习-元数据上下文&lt;/h1>
&lt;h2 id="上下文对象">上下文对象&lt;/h2>
&lt;p>上下文对象作为读取并解析配置, 承载数据的核心；&lt;/p>
&lt;p>spring有ApplicationContext,netty有HandlerContext&lt;/p>
&lt;p>向其他中间件一样，在ShardingSphere也十分重要; 后续几乎所有功能比如数据分片、数据加密、SQL 改写，各类扩展都依赖上下文对象存储的数据&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210913215827140.png" alt="image-20210913215827140" />&lt;/p>
&lt;h3 id="标准元数据上下文---standardmetadatacontexts">标准元数据上下文 StandardMetaDataContexts&lt;/h3>
&lt;p>核心存储了ShardingSphereMetaData元数据集合，作为重点后面分析&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Getter&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">StandardMetaDataContexts&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MetaDataContexts&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 元数据集合
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ShardingSphereMetaData&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">metaDataMap&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereRuleMetaData&lt;/span> &lt;span class="n">globalRuleMetaData&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 执行引擎
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ExecutorEngine&lt;/span> &lt;span class="n">executorEngine&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//优化引擎上下文工厂
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">OptimizeContextFactory&lt;/span> &lt;span class="n">optimizeContextFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ConfigurationProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 状态上下文
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">StateContext&lt;/span> &lt;span class="n">stateContext&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="治理元数据上下文---standardmetadatacontexts">治理元数据上下文 StandardMetaDataContexts&lt;/h3>
&lt;p>其实也是用的标准的StandardMetaDataContexts，治理模块shardingsphere-governance使用该上下文，通过配置中心读取规则配置，&lt;/p>
&lt;p>注入到StandardMetaDataContexts中，GovernanceFacade是配置中心的门面模式，目前支持了zookeeper和etcd,其实还可以通过&lt;code>RegistryCenterRepository&lt;/code>的spi实现其他的配置中心，比如nacos, apollo,consul等。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">GovernanceMetaDataContexts&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MetaDataContexts&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//治理： 配置中心的门面模式
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">GovernanceFacade&lt;/span> &lt;span class="n">governanceFacade&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//还是使用StandardMetaDataContexts 装饰器模式
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="n">StandardMetaDataContexts&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereLock&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="初始化上下文对象">初始化上下文对象&lt;/h2>
&lt;p>ShardingSphere中通过&lt;/p>
&lt;p>&lt;code>org.apache.shardingsphere.infra.context.metadata.MetaDataContextsBuilder&lt;/code>构造器模式，构造&lt;/p>
&lt;p>&lt;code>org.apache.shardingsphere.infra.context.metadata.MetaDataContexts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">ShardingSphereDataSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DataSource&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RuleConfiguration&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">configurations&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Properties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 构建器构造 元数据上下文
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">metaDataContexts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MetaDataContextsBuilder&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DefaultSchema&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LOGIC_NAME&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DefaultSchema&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LOGIC_NAME&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">configurations&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// xa事务类型
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">xaTransactionMangerType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProps&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurationPropertyKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">XA_TRANSACTION_MANAGER_TYPE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 创建事务上下文TransactionContexts//后面学习中细讲，本文不涉及
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">transactionContexts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createTransactionContexts&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResource&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getDatabaseType&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">xaTransactionMangerType&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="metadatacontextsbuilderbuild构建metadatacontexts">MetaDataContextsBuilder.build()构建MetaDataContexts&lt;/h3>
&lt;p>org.apache.shardingsphere.infra.context.metadata.MetaDataContextsBuilder.build方法&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Build meta data contexts.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @exception SQLException SQL exception
&lt;/span>&lt;span class="cm"> * @return meta data contexts
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">StandardMetaDataContexts&lt;/span> &lt;span class="nf">build&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ShardingSphereMetaData&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mataDataMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">schemaRuleConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">each&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">schemaRuleConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keySet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// buildMetaData构造核心的元数据对象ShardingSphereMetaData，加入到集合中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">mataDataMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">each&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">buildMetaData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">each&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 返回标准元数据上下文
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StandardMetaDataContexts&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mataDataMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">buildGlobalSchemaMetaData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mataDataMap&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">executorEngine&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="shardingsphere元数据">ShardingSphere元数据&lt;/h3>
&lt;p>ShardingSphere元数据存储以下数据：&lt;/p>
&lt;blockquote>
&lt;p>1数据源： 元数据资源，&lt;/p>
&lt;p>2 规则配置&lt;/p>
&lt;p>3 数据库元数据信息，表，字段，索引&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@RequiredArgsConstructor&lt;/span>
&lt;span class="nd">@Getter&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShardingSphereMetaData&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 数据源 元数据资源
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereResource&lt;/span> &lt;span class="n">resource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 配置规则元数据： 原始配置RuleConfiguration集合 =》 配置解析后的ShardingSphereRule集合
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereRuleMetaData&lt;/span> &lt;span class="n">ruleMetaData&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 数据库表元数据： 字段元数据及索引元数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereSchema&lt;/span> &lt;span class="n">schema&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Judge whether is completed.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return is completed or not
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isComplete&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">ruleMetaData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRules&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDataSources&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="再看如何构建shardingsphere元数据buildmetadata方法">再看如何构建ShardingSphere元数据，buildMetaData方法&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="kd">private&lt;/span> &lt;span class="n">ShardingSphereMetaData&lt;/span> &lt;span class="nf">buildMetaData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">schemaName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DataSource&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dataSourceMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dataSources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">schemaName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RuleConfiguration&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ruleConfigs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">schemaRuleConfigs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">schemaName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//确定数据库类型
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DatabaseType&lt;/span> &lt;span class="n">databaseType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DatabaseTypeRecognizer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDatabaseType&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">values&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//a) 通过用户配置的RuleConfiguration 解析出 ShardingSphereRule
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShardingSphereRule&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rules&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ShardingSphereRulesBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">buildSchemaRules&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">schemaName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ruleConfigs&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 构造规则元数据对象ShardingSphereRuleMetaData
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ShardingSphereRuleMetaData&lt;/span> &lt;span class="n">ruleMetaData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShardingSphereRuleMetaData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ruleConfigs&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">rules&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//构造ShardingSphere元数据对象ShardingSphereMetaData
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//b) 构建数据源的元数据对象 c) 构建数据库的元数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShardingSphereMetaData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">schemaName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">buildResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">ruleMetaData&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">buildSchema&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">rules&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="a-shardingsphere规则元数据">a) ShardingSphere规则元数据&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RequiredArgsConstructor&lt;/span>
&lt;span class="nd">@Getter&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShardingSphereRuleMetaData&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 用户配置的规则对象集合
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RuleConfiguration&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">configurations&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 解析后的规则集合
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShardingSphereRule&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rules&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>RuleConfiguration直接对应了用户的yaml, properties等配置&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210913214107105.png" alt="image-20210913214107105" />&lt;/p>
&lt;p>ShardingSphereRule&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210913222453670.png" alt="image-20210913222453670" />&lt;/p>
&lt;p>buildSchemaRules()&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShardingSphereRule&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">buildSchemaRules&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">schemaName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RuleConfiguration&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">schemaRuleConfigurations&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">DatabaseType&lt;/span> &lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DataSource&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RuleConfiguration&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SchemaRuleBuilder&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">builders&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">OrderedSPIRegistry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRegisteredServices&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">schemaRuleConfigurations&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SchemaRuleBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">appendDefaultKernelSchemaRuleConfigurationBuilder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">builders&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// SchemaRuleBuilder. build() 构建ShardingSphereRule
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">builders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">entrySet&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">map&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">entry&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">schemaName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">())).&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toList&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>SchemaRuleBuilder作为一个规则解析扩展点&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210914013607189.png" alt="image-20210914013607189" />&lt;/p>
&lt;h4 id="b-再看buildresource即构建数据源的元数据对象">b) 再看buildResource，即构建数据源的元数据对象&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">ShardingSphereResource&lt;/span> &lt;span class="nf">buildResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">DatabaseType&lt;/span> &lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DataSource&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//构建数据源的元数据对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DataSourcesMetaData&lt;/span> &lt;span class="n">dataSourceMetas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DataSourcesMetaData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">getDatabaseAccessConfigurationMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//缓存下数据源的各类属性 链接，用户名，驱动，各类版本等等的原始信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">CachedDatabaseMetaData&lt;/span> &lt;span class="n">cachedDatabaseMetaData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createCachedDatabaseMetaData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">orElse&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShardingSphereResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">dataSourceMetas&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">cachedDatabaseMetaData&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">databaseType&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="c-再看如何构建数据库元数据-buildschema方法">c) 再看如何构建数据库元数据, buildSchema()方法&lt;/h4>
&lt;p>加载数据库的元数据，但是各个方言版本的元数据不太一样，例如mysql的在information_schema中，针对对不同方言，可以通过DialectTableMetaDataLoader的spi扩展定制各类方言版本的数据库元数据加载。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210914014024075.png" alt="image-20210914014024075" />&lt;/p>
&lt;ul>
&lt;li>数据库元数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShardingSphereSchema&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 表元数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TableMetaData&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tables&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>数据库表元数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="c1">// 表元数据
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TableMetaData&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 组合 列元数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ColumnMetaData&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">columns&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 组合 索引元数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IndexMetaData&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">indexes&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>列元数据&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RequiredArgsConstructor&lt;/span>
&lt;span class="nd">@Getter&lt;/span>
&lt;span class="nd">@EqualsAndHashCode&lt;/span>
&lt;span class="nd">@ToString&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ColumnMetaData&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 列名
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 数据类型
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">dataType&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 是否主键
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">primaryKey&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 是否自动生成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">generated&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// 是否大小敏感
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">caseSensitive&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">IndexMetaData&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 索引字段名
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>buildSchema()方法&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA"> &lt;span class="kd">private&lt;/span> &lt;span class="n">ShardingSphereSchema&lt;/span> &lt;span class="nf">buildSchema&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">DatabaseType&lt;/span> &lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DataSource&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShardingSphereRule&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rules&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">SchemaBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SchemaBuilderMaterials&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">rules&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ShardingSphereSchema&lt;/span> &lt;span class="nf">build&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">SchemaBuilderMaterials&lt;/span> &lt;span class="n">materials&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ShardingSphereSchema&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShardingSphereSchema&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// 有规则配置的表的处理 可以通过 RuleBasedTableMetaDataBuilder 的spi扩展解析
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">addRuleConfiguredTables&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">materials&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 通过找对对应方言数据库的加载器DialectTableMetaDataLoader加载
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">appendRemainTables&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">materials&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>整个加载过程中使用不少设计模式，构造器模式，工厂模式，装饰器，组合等等，spi扩展点也预留不少，仔细研读收获颇丰。&lt;/p>
&lt;p>目前的解读只是从大的主线来理解，当然中间还有很多细节需要后续补充。&lt;/p>
&lt;p>debug过程中容易走丢，实时记录下路线是个不错的方式：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210914001438627.png" alt="image-20210914001438627" />&lt;/p></description></item><item><title>shardingsphere（5.0.0.beta）源码总览</title><link>https://fengzhenbing.github.io/p/shardingsphere5.0.0.beta%E6%BA%90%E7%A0%81%E6%80%BB%E8%A7%88/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/shardingsphere5.0.0.beta%E6%BA%90%E7%A0%81%E6%80%BB%E8%A7%88/</guid><description>&lt;h2 id="shardingsphere500beta源码学习-总览">Shardingsphere（5.0.0.beta）源码学习-总览&lt;/h2>
&lt;p>shardingsphere作为极为优秀的开源分布式数据库解决方案，通过阅读源码可以学到很多软件设计与开发的知识。&lt;/p>
&lt;p>本次我继续按照之前读源码的方式&lt;code>从整体到细节，带着问题读源码的方式&lt;/code>记录这次深入学习 shardingsphere的过程。&lt;/p>
&lt;h3 id="源码版本">源码版本&lt;/h3>
&lt;ul>
&lt;li>5.0.0.beta &lt;a class="link" href="https://shardingsphere.apache.org/document/5.0.0-beta/cn/overview/" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;/li>
&lt;li>源码地址 &lt;a href="https://github.com/apache/shardingsphere/tree/5.0.0-beta">https://github.com/apache/shardingsphere/tree/5.0.0-beta&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="项目结构">项目结构&lt;/h3>
&lt;p>先大概理解各个模块的主要功能点&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>一级目录&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>examples&lt;/td>
&lt;td>各种使用例子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-agent&lt;/td>
&lt;td>监控, 对接apm,链路追踪&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-db-protocol&lt;/td>
&lt;td>数据库协议&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-distribution&lt;/td>
&lt;td>相关打包发步用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-distsql-parser&lt;/td>
&lt;td>distsql新功能:&lt;!-- raw HTML omitted --> ShardingSphere 特有的内置 SQL 语言，提供了标准 SQL 之外的增量功能操作能力。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-features&lt;/td>
&lt;td>&lt;strong>常用功能&lt;/strong>&lt;!-- raw HTML omitted -->shardingsphere-db-discovery 基于MGR主从切换的功能&lt;!-- raw HTML omitted -->shardingsphere-encrypt 加解密&lt;!-- raw HTML omitted -->shardingsphere-readwrite-splitting 读写分离 &lt;code>**重点**&lt;/code>&lt;!-- raw HTML omitted -->shardingsphere-shadow 影子库&lt;!-- raw HTML omitted -->shardingsphere-sharding 分库分表 &lt;code>**重点**&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-governance&lt;/td>
&lt;td>数据治理：结合注册中心，提供给前端页面使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-infra&lt;/td>
&lt;td>&lt;strong>引擎内核&lt;/strong>：&lt;!-- raw HTML omitted -->shardingsphere-infra-authority proxy的权限控制&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->shardingsphere-infra-binder sql解析后的结果绑定封装&lt;!-- raw HTML omitted --> SQLStatement封装为各类上下文context&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->shardingsphere-infra-common 重要的实体类及工具 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->的元数据metadata,SPI,yaml工具，rule接口等&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->shardingsphere-infra-context 上下文相关&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->shardingsphere-infra-datetime 时间服务&lt;!-- raw HTML omitted -->shardingsphere-infra-executor 执行器引擎 &lt;code>**重点**&lt;/code>&lt;!-- raw HTML omitted -->shardingsphere-infra-merge 归并引擎&lt;code>**重点**&lt;/code>&lt;!-- raw HTML omitted -->shardingsphere-infra-optimize 优化引擎&lt;code>**重点**&lt;/code>&lt;!-- raw HTML omitted -->shardingsphere-infra-parser 解析引擎&lt;code>**重点**&lt;/code>&lt;!-- raw HTML omitted -->shardingsphere-infra-rewrite 改写引擎&lt;code>**重点**&lt;/code>&lt;!-- raw HTML omitted -->shardingsphere-infra-route 路由引擎&lt;code>**重点**&lt;/code>&lt;!-- raw HTML omitted -->&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-jdbc&lt;/td>
&lt;td>jdbc核心功能：增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。&lt;!-- raw HTML omitted -->装饰器模式，对原生的DataSource,Connection,&lt;!-- raw HTML omitted -->Statement(PrepareStatement),ResultSet进行包装，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-proxy&lt;/td>
&lt;td>透明化的数据库代理&lt;!-- raw HTML omitted -->提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-scaling&lt;/td>
&lt;td>数据迁移相关:弹性伸缩&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-sql-parser&lt;/td>
&lt;td>sql解析器：antlr4 词法语法解析出SqlStatement,提供各类数据库的方言实现。&lt;!-- raw HTML omitted -->SQL 解析作为分库分表类产品的核心，其性能和兼容性是&lt;strong>最重要&lt;/strong>的衡量指标&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-test&lt;/td>
&lt;td>测试引擎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shardingsphere-transaction&lt;/td>
&lt;td>事务：整合现有的成熟事务方案，&lt;!-- raw HTML omitted -->本地事务、&lt;!-- raw HTML omitted -->两阶段事务（XA）&lt;!-- raw HTML omitted -->和柔性事务（Seata AT 事务）提供统一的分布式事务接口&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>对于重点核心内容有个大致认识，后面再单独分模块分析。&lt;/p>
&lt;h3 id="代码分析">代码分析&lt;/h3>
&lt;p>shardingsphere-jdbc是用的最多的接入方式，以 shardingsphere-jdbc的insert一条数据为例，先过一遍流程。&lt;/p>
&lt;p>&lt;code>INSERT INTO t_order (user_id, address_id, status) VALUES (?, ?, ?)&lt;/code>&lt;/p>
&lt;h4 id="分析入口">分析入口&lt;/h4>
&lt;p>使用org.apache.shardingsphere.example.sharding.raw.jdbc.YamlConfigurationExampleMain 的分库分表示例，插入数据。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">YamlConfigurationExampleMain&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ShardingType&lt;/span> &lt;span class="n">shardingType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ShardingType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SHARDING_DATABASES_AND_TABLES&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 初始化得到的DataSource为ShardingSphereDataSource
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DataSource&lt;/span> &lt;span class="n">dataSource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">YamlDataSourceFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">shardingType&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ExampleExecuteTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getExampleService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataSource&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>YamlDataSourceFactory.newInstance(shardingType)调用&lt;code>ShardingSphereDataSourceFactory.createDataSource&lt;/code>得到ShardingSphereDataSource，可以看到ShardingSphereDataSource是对JDBC规范DataSource的实现。&lt;/p>
&lt;p>同样，后续用的Connection、Statement、PrepareStatement都有对应的ShardingConnection、ShardingStatment、ShardingPreparedStatement的实现。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShardingSphereDataSourceFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">DataSource&lt;/span> &lt;span class="nf">createDataSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DataSource&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RuleConfiguration&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">configurations&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Properties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShardingSphereDataSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">configurations&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="jdbc">jdbc&lt;/h4>
&lt;p>shardingsphere-jdbc下shardingsphere-jdbc-core中定义了jdbc规范的ShardingSphere实现&lt;/p>
&lt;ul>
&lt;li>
&lt;p>AbstractXXXAdapter对jdbc规范接口做一次适配&lt;/p>
&lt;/li>
&lt;li>
&lt;p>都继承了父类AbstractUnsupportedOperationXxx : 各个数据库厂家对jdbc规范没有完整实现，ShardingSphere对这些没实现方法统一在&lt;/p>
&lt;p>AbstractUnsupportedOperationXxx 中抛出不支持的异常，指明用户不可以使用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>org.apache.shardingsphere.driver.jdbc.core.datasource.ShardingSphereDataSource&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShardingSphereDataSource&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractUnsupportedOperationDataSource&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">AutoCloseable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">MetaDataContexts&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">TransactionContexts&lt;/span> &lt;span class="n">transactionContexts&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ShardingSphereConnection&lt;/span> &lt;span class="nf">getConnection&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShardingSphereConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getDataSourceMap&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">transactionContexts&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TransactionTypeHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ShardingSphereConnection&lt;/span> &lt;span class="nf">getConnection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">getConnection&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>org.apache.shardingsphere.driver.jdbc.core.connection.ShardingSphereConnection&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShardingSphereConnection&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractConnectionAdapter&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">ExecutorJDBCManager&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 数据源map
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DataSource&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dataSourceMap&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">MetaDataContexts&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//事务类型 LOCAL, XA, BASE;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">TransactionType&lt;/span> &lt;span class="n">transactionType&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingTransactionManager&lt;/span> &lt;span class="n">shardingTransactionManager&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">PreparedStatement&lt;/span> &lt;span class="nf">prepareStatement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sql&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">resultSetType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">resultSetConcurrency&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">resultSetHoldability&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShardingSpherePreparedStatement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sql&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">resultSetType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">resultSetConcurrency&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">resultSetHoldability&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Statement&lt;/span> &lt;span class="nf">createStatement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">resultSetType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">resultSetConcurrency&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">resultSetHoldability&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShardingSphereStatement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">resultSetType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">resultSetConcurrency&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">resultSetHoldability&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSpherePreparedStatement&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShardingSpherePreparedStatement&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractPreparedStatementAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ResultSet&lt;/span> &lt;span class="nf">executeQuery&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ResultSet&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">clearPrevious&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">executionContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createExecutionContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">QueryResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">queryResults&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">executeQuery0&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// 执行的查询结构通过归并引擎归并
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">MergedResult&lt;/span> &lt;span class="n">mergedResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mergeQuery&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queryResults&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShardingSphereResultSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getResultSetsForShardingSphereResultSet&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">mergedResult&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">executionContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">clearBatch&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">currentResultSet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">executeUpdate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 调用归并引擎
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">MergedResult&lt;/span> &lt;span class="nf">mergeQuery&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">QueryResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">queryResults&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ShardingSphereMetaData&lt;/span> &lt;span class="n">metaData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultMetaData&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">MergeEngine&lt;/span> &lt;span class="n">mergeEngine&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MergeEngine&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResource&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getDatabaseType&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSchema&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProps&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRuleMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getRules&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">mergeEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">merge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queryResults&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">executionContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSqlStatementContext&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="执行流程">执行流程&lt;/h4>
&lt;p>再接着调试栈来看&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210909233033903.png" alt="image-20210909233033903" />&lt;/p>
&lt;p>执行流程为&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210910003744036.png" alt="image-20210910003744036" />&lt;/p>
&lt;p>下面简单分析：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShardingSpherePreparedStatement&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">AbstractPreparedStatementAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">ShardingSpherePreparedStatement&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereConnection&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sql&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">resultSetType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">resultSetConcurrency&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">resultSetHoldability&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">returnGeneratedKeys&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">....&lt;/span>
&lt;span class="c1">// 各种初始化省略
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 敲黑板： 1， 使用解析器引擎解析sql语句，得到结果sqlStatement。 SqlStatement封装了sql解析后各类AST节点（DDL,DML,DCL...）后面细讲
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ShardingSphereSQLParserEngine&lt;/span> &lt;span class="n">sqlParserEngine&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ShardingSphereSQLParserEngine&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DatabaseTypeRegistry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTrunkDatabaseTypeName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResource&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getDatabaseType&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="n">sqlStatement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sqlParserEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parse&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sql&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1">// sql执行器 RawExecutor
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">rawExecutor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RawExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getExecutorEngine&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">connection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isHoldTransaction&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProps&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">....&lt;/span>
&lt;span class="c1">// 各种初始化省略
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">executeUpdate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">clearPrevious&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// 创建执行的上下文，创建过程中完成了路由的解析，sQL改写真实sql,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">executionContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createExecutionContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getRuleMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getRules&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">anyMatch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">each&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">each&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">RawExecutionRule&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ExecuteResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">executeResults&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rawExecutor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">createRawExecutionGroupContext&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">executionContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSqlStatementContext&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RawSQLExecutorCallback&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">accumulate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">executeResults&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 下面会调用执行
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ExecutionGroupContext&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">JDBCExecutionUnit&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">executionGroupContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createExecutionGroupContext&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">cacheStatements&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">executionGroupContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInputGroups&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">// DriverJDBCExecutor会调用执行引擎执行 driverJDBCExecutor.executeUpdate下面会简单分析
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">driverJDBCExecutor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeUpdate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">executionGroupContext&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">executionContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSqlStatementContext&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">executionContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRouteContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getRouteUnits&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">createExecuteUpdateCallback&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">clearBatch&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1">// 创建执行的上下文
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">ExecutionContext&lt;/span> &lt;span class="nf">createExecutionContext&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 创建逻辑SQL
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">LogicSQL&lt;/span> &lt;span class="n">logicSQL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createLogicSQL&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// SQLCheckEngine检查SQL的是否合法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SQLCheckEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">check&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSqlStatementContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSqlStatement&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">logicSQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getParameters&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getRuleMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getRules&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">DefaultSchema&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LOGIC_NAME&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMetaDataMap&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//内核处理器生成执行上下文
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ExecutionContext&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kernelProcessor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">generateExecutionContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultMetaData&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProps&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">findGeneratedKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">ifPresent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">generatedKey&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">generatedValues&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">generatedKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getGeneratedValues&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 创建逻辑SQL
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">LogicSQL&lt;/span> &lt;span class="nf">createLogicSQL&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">parameters&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">getParameters&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">ShardingSphereSchema&lt;/span> &lt;span class="n">schema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSchema&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">SQLStatementContext&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SQLStatementContextFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">schema&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">parameters&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatement&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LogicSQL&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sql&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">parameters&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再看内核处理器如何生成执行上下文&lt;/p>
&lt;p>org.apache.shardingsphere.infra.context.kernel.KernelProcessor&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Kernel processor. 内核处理器
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">KernelProcessor&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Generate execution context.
&lt;/span>&lt;span class="cm"> * 创建执行上下文
&lt;/span>&lt;span class="cm"> * @param logicSQL logic SQL
&lt;/span>&lt;span class="cm"> * @param metaData ShardingSphere meta data
&lt;/span>&lt;span class="cm"> * @param props configuration properties
&lt;/span>&lt;span class="cm"> * @return execution context
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ExecutionContext&lt;/span> &lt;span class="nf">generateExecutionContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">LogicSQL&lt;/span> &lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereMetaData&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ConfigurationProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//2 使用路由引擎创建路由
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">RouteContext&lt;/span> &lt;span class="n">routeContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">route&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//3 使用改写引擎改写出真实执行的sql
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SQLRewriteResult&lt;/span> &lt;span class="n">rewriteResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rewrite&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">routeContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//4 创建执行上下文
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ExecutionContext&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createExecutionContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">routeContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">rewriteResult&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 日志
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">logSQL&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 使用路由引擎创建路由 SQLRouteEngine(...).route(..)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">RouteContext&lt;/span> &lt;span class="nf">route&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">LogicSQL&lt;/span> &lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereMetaData&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ConfigurationProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SQLRouteEngine&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metaData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRuleMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getRules&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">route&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// SQLRewriteEntry改写引擎
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">SQLRewriteResult&lt;/span> &lt;span class="nf">rewrite&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">LogicSQL&lt;/span> &lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereMetaData&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ConfigurationProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">RouteContext&lt;/span> &lt;span class="n">routeContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SQLRewriteEntry&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">metaData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSchema&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRuleMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getRules&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">rewrite&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSql&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">logicSQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getParameters&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">logicSQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSqlStatementContext&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">routeContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 创建执行上下文
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">ExecutionContext&lt;/span> &lt;span class="nf">createExecutionContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">LogicSQL&lt;/span> &lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereMetaData&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">RouteContext&lt;/span> &lt;span class="n">routeContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">SQLRewriteResult&lt;/span> &lt;span class="n">rewriteResult&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ExecutionContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSqlStatementContext&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">ExecutionContextBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metaData&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">rewriteResult&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">logicSQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSqlStatementContext&lt;/span>&lt;span class="o">()),&lt;/span> &lt;span class="n">routeContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">logSQL&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">LogicSQL&lt;/span> &lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ConfigurationProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ExecutionContext&lt;/span> &lt;span class="n">executionContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">.&amp;lt;&lt;/span>&lt;span class="n">Boolean&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">getValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurationPropertyKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SQL_SHOW&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SQLLogger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logSQL&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">.&amp;lt;&lt;/span>&lt;span class="n">Boolean&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">getValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurationPropertyKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SQL_SIMPLE&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">executionContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="解析引擎">解析引擎&lt;/h5>
&lt;h5 id="路由引擎">路由引擎&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="nd">@RequiredArgsConstructor&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SQLRouteEngine&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShardingSphereRule&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rules&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ConfigurationProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Route SQL.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param logicSQL logic SQL
&lt;/span>&lt;span class="cm"> * @param metaData ShardingSphere meta data
&lt;/span>&lt;span class="cm"> * @return route context
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RouteContext&lt;/span> &lt;span class="nf">route&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">LogicSQL&lt;/span> &lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereMetaData&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SQLRouteExecutor&lt;/span> &lt;span class="n">executor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">isNeedAllSchemas&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSqlStatementContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSqlStatement&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AllSQLRouteExecutor&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PartialSQLRouteExecutor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rules&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 进行路由计算，生成路由结果上下文RouteContext
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">route&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">logicSQL&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">metaData&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// TODO use dynamic config to judge UnconfiguredSchema
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isNeedAllSchemas&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">SQLStatement&lt;/span> &lt;span class="n">sqlStatement&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">sqlStatement&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">MySQLShowTablesStatement&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="sql改写">SQL改写&lt;/h5>
&lt;p>&lt;img src="https://shardingsphere.apache.org/document/current/img/sharding/rewrite_architecture_cn.png" alt="X" />&lt;/p>
&lt;blockquote>
&lt;p>加密的SQL改写&lt;/p>
&lt;p>影子库SQL改写&lt;/p>
&lt;p>分片的SQL改写&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210910002416276.png" alt="image-20210910002416276" />&lt;/p>
&lt;h5 id="执行引擎">执行引擎&lt;/h5>
&lt;blockquote>
&lt;p>将路由和改写完成之后的真实 SQL 安全且高效发送到底层数据源执行。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DriverJDBCExecutor&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Execute update.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param executionGroupContext execution group context
&lt;/span>&lt;span class="cm"> * @param sqlStatementContext SQL statement context
&lt;/span>&lt;span class="cm"> * @param routeUnits route units
&lt;/span>&lt;span class="cm"> * @param callback JDBC executor callback 回调
&lt;/span>&lt;span class="cm"> * @return effected records count
&lt;/span>&lt;span class="cm"> * @throws SQLException SQL exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">executeUpdate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">ExecutionGroupContext&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">JDBCExecutionUnit&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">executionGroupContext&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">SQLStatementContext&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RouteUnit&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">routeUnits&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">JDBCExecutorCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 执行引擎初始化
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ExecuteProcessEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initialize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">executionGroupContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProps&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jdbcLockEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">executionGroupContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">routeUnits&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">isNeedAccumulate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">metaDataContexts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getRuleMetaData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getRules&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">accumulate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">results&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ExecuteProcessEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">finish&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">executionGroupContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getExecutionID&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ExecuteProcessEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clean&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="归并引擎">归并引擎&lt;/h5>
&lt;p>对于查询类，有结果会使用归并引擎合并结果 &lt;code>MergeEngine(..).merge(..)&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>将从各个数据节点获取的多数据结果集，组合成为一个结果集并正确的返回至请求客户端，称为结果归并。&lt;/p>
&lt;/blockquote>
&lt;p>org.apache.shardingsphere.infra.merge.MergeEngine&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">&lt;span class="kd">public&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MergeEngine&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ShardingSphereServiceLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ResultProcessEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">DatabaseType&lt;/span> &lt;span class="n">databaseType&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereSchema&lt;/span> &lt;span class="n">schema&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ConfigurationProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;rawtypes&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShardingSphereRule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ResultProcessEngine&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">engines&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">MergeEngine&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">DatabaseType&lt;/span> &lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ShardingSphereSchema&lt;/span> &lt;span class="n">schema&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ConfigurationProperties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShardingSphereRule&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rules&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">databaseType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">databaseType&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">schema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">schema&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">engines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">OrderedSPIRegistry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRegisteredServices&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rules&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ResultProcessEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Merge.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param queryResults query results
&lt;/span>&lt;span class="cm"> * @param sqlStatementContext SQL statement context
&lt;/span>&lt;span class="cm"> * @return merged result
&lt;/span>&lt;span class="cm"> * @throws SQLException SQL exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">MergedResult&lt;/span> &lt;span class="nf">merge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">QueryResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">queryResults&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">SQLStatementContext&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//生成合并结果集
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MergedResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mergedResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">executeMerge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queryResults&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//对合并结果集装饰处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MergedResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mergedResult&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isPresent&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">decorate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mergedResult&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">decorate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queryResults&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">orElseGet&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TransparentMergedResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queryResults&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">({&lt;/span>&lt;span class="s">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;rawtypes&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MergedResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">executeMerge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">QueryResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">queryResults&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">SQLStatementContext&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShardingSphereRule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ResultProcessEngine&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">engines&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">entrySet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">ResultMergerEngine&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ResultMerger&lt;/span> &lt;span class="n">resultMerger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">ResultMergerEngine&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// ResultMerger进行合并
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resultMerger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">merge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queryResults&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">schema&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">empty&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">({&lt;/span>&lt;span class="s">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;rawtypes&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">MergedResult&lt;/span> &lt;span class="nf">decorate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">MergedResult&lt;/span> &lt;span class="n">mergedResult&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">SQLStatementContext&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">MergedResult&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShardingSphereRule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ResultProcessEngine&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">engines&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">entrySet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">ResultDecoratorEngine&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ResultDecorator&lt;/span> &lt;span class="n">resultDecorator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">ResultDecoratorEngine&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">schema&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">resultDecorator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">decorate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mergedResult&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">resultDecorator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">decorate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">mergedResult&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">({&lt;/span>&lt;span class="s">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;rawtypes&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MergedResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">decorate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">QueryResult&lt;/span> &lt;span class="n">queryResult&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">SQLStatementContext&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">MergedResult&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShardingSphereRule&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ResultProcessEngine&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">engines&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">entrySet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">ResultDecoratorEngine&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ResultDecorator&lt;/span> &lt;span class="n">resultDecorator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">ResultDecoratorEngine&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">databaseType&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">schema&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">resultDecorator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">decorate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queryResult&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">resultDecorator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">decorate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sqlStatementContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ofNullable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ResultMerger&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210910010533225.png" alt="image-20210910010533225" />&lt;/p>
&lt;ul>
&lt;li>以上对整个流程中各个关键节点进行简单分析，后续对每个节点做详细学习&lt;/li>
&lt;/ul></description></item><item><title>分布式任务调度Hodor</title><link>https://fengzhenbing.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6hodor/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6hodor/</guid><description>&lt;h2 id="分布式任务调度hodor源码分析整体结构">分布式任务调度Hodor源码分析（整体结构）&lt;/h2>
&lt;h3 id="简介">简介&lt;/h3>
&lt;p>Hodor是一个高性能的分布式任务调度框架。&lt;/p>
&lt;p>github地址(&lt;a href="https://github.com/tincopper/hodor">https://github.com/tincopper/hodor&lt;/a>)&lt;/p>
&lt;h3 id="架构图">架构图&lt;/h3>
&lt;blockquote>
&lt;p>因无任何文档，以下架构图纯阅读源码个人理解后手工所画：&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210907231952228.png" alt="image-20210907231952228" />&lt;/p>
&lt;h3 id="代码目录及分析">代码目录及分析&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>hodor-admin&lt;/p>
&lt;p>待开发：配合前端页面做任务展示&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hodor-client&lt;/p>
&lt;p>客户端，用户app通过该客户端将任务信息提交到hodor-server，供其&lt;strong>调度&lt;/strong>&lt;/p>
&lt;p>集成了nettyserver服务，接收来自hodor-server的任务&lt;strong>执行&lt;/strong>请求&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hodor-client-demo&lt;/p>
&lt;p>用户app示例：集成了hodor-client&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hodor-common&lt;/p>
&lt;p>通用库&lt;/p>
&lt;ul>
&lt;li>环形队列&lt;/li>
&lt;li>观察者模式（事件发布监听）模型&lt;/li>
&lt;li>Excutor：多线程封装&lt;/li>
&lt;li>Extension: SPI扩展方式封装&lt;/li>
&lt;li>负载均衡&lt;/li>
&lt;li>存储：本地缓存/mysql/h2&lt;/li>
&lt;li>异常&lt;/li>
&lt;li>日志&lt;/li>
&lt;li>Distributor高性能队列&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>hodor-core&lt;/p>
&lt;p>简单的spring mybatis 工程：对任务/任务执行记录等数据入库（mysql）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hodor-extension&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hodor-model&lt;/p>
&lt;p>实体&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hodor-register&lt;/p>
&lt;p>注册中心封装，目前只实现了zookeeper&lt;/p>
&lt;ul>
&lt;li>hodor-register-api&lt;/li>
&lt;li>Hodor-register-zookeeper&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>hodor-remoting&lt;/p>
&lt;p>netty http客户端&lt;/p>
&lt;p>netty http服务端&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hodor-scheduler&lt;/p>
&lt;p>任务定时的封装&lt;/p>
&lt;p>目前只实现了quartz&lt;/p>
&lt;p>quartz当到达&lt;/p>
&lt;ul>
&lt;li>hodor-scheduler-api&lt;/li>
&lt;li>hodor-scheduler-quartz&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>hodor-server&lt;/p>
&lt;p>1，hodor-server集成了注册中心客户端，监听server服务的变更；&lt;/p>
&lt;p>2， hodor-server注册到注册中心，并选举一个leader&lt;/p>
&lt;p>3， hodor-server通过集成hodor-remoting的nettyserver接收hodor-client发送过来的注册定时任务的命令&lt;/p>
&lt;p>4， hodor-server通过注册的server服务，合理分配任务&lt;/p>
&lt;p>5，记录任务到db，并记录日志，再向hodor-scheduler-quartz注册任务&lt;/p>
&lt;p>6，hodor-scheduler-quartz当某个任务到达执行时刻，触发 hodor-server的任务执行器去下发任务&lt;/p>
&lt;p>7， hodor-server通过集成hodor-remoting的nettyclient向hodor-client下发任务执行命令&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>docusaurus构建website</title><link>https://fengzhenbing.github.io/p/docusaurus%E6%9E%84%E5%BB%BAwebsite/</link><pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/docusaurus%E6%9E%84%E5%BB%BAwebsite/</guid><description>&lt;h2 id="docusaurus构建website">docusaurus构建website&lt;/h2>
&lt;h3 id="环境">环境&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Node.js version &amp;gt;= 12.13.0 以上(node -v 查看)，使用了国际化i18n，则Node.js version &amp;gt;=14以上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Yarn version &amp;gt;= 1.5 ( yarn &amp;ndash;version查看). mac下可以使用&lt;a class="link" href="https://fengzhenbing.github.io/p/mac%E4%B8%8Bnode%E5%8D%87%E7%BA%A7/" target="_blank" rel="noopener"
>n管理node版本&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="title-logo等文案首页展示">Title logo等文案，首页展示&lt;/h3>
&lt;p>待讨论&lt;/p>
&lt;h3 id="菜单调整">菜单调整&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Nav : 文档 社区 新闻 博客 links 国际化切换 搜索&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Documentation Community News Blog Links&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Footer:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="首页">首页&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>下载按钮 文档按钮 star按钮修改&lt;/p>
&lt;/li>
&lt;li>
&lt;p>样式修改&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="国际化语言">国际化语言&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">yarn write-translations --locale zh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考https://docusaurus.io/zh-CN/docs/cli#docusaurus-write-translations-sitedir&lt;/p>
&lt;p>中英文两个版本的文件名称保持一致。文档中没有指定sidebar_position时，默认按文件名称在菜单栏排序&lt;/p>
&lt;p>看中文效果&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell"> yarn run start -- --locale zh
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="多版本">多版本&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">yarn run docusaurus docs:version 2.3.0
yarn run docusaurus docs:version 2.4.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>历史版本的国际化参考&lt;/p>
&lt;p>&lt;a href="https://docusaurus.io/zh-CN/docs/api/plugins/@docusaurus/plugin-content-docs#i18n">https://docusaurus.io/zh-CN/docs/api/plugins/@docusaurus/plugin-content-docs#i18n&lt;/a>&lt;/p>
&lt;p>归档目录&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210822214033782.png" alt="image-20210822214033782" />&lt;/p>
&lt;p>归档文件翻译目录&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210822214124926.png" alt="image-20210822214124926" />&lt;/p>
&lt;h3 id="hugo文档迁移注意事项">hugo文档迁移注意事项&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>约定大于配置：很多目录都是约定好的。&lt;/p>
&lt;p>建议快速通读一遍&lt;a class="link" href="https://docusaurus.io/zh-CN/docs" target="_blank" rel="noopener"
>文档&lt;/a>，遇到编译问题，能快速定位到具体章节去查看。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>keywords必须为数组,原来写的字符串&lt;/p>
&lt;p>keywords: [&amp;ldquo;Apache shenyu&amp;rdquo;]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不支持md文件里的html标签 比如 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sidebar_position: 1 指定文档在菜单栏的顺序第一位。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>md文件中title就是菜单栏显示的名称，无法显示不一样的菜单名和文档标题名。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>md中&lt;!-- raw HTML omitted --> 类似的标签，在发布时生效。&lt;/p>
&lt;p>本地想看效果，可以yarn build.然后将静态文件通过nginx代理访问。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>插画使用: &lt;a href="https://www.iconfont.cn/illustrations/detail?spm=a313x.7781069.1998910419.d9df05512&amp;amp;cid=24712">https://www.iconfont.cn/illustrations/detail?spm=a313x.7781069.1998910419.d9df05512&amp;amp;cid=24712&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.iconfont.cn/collections/detail?spm=a313x.7781069.1998910419.d9df05512&amp;amp;cid=34403">https://www.iconfont.cn/collections/detail?spm=a313x.7781069.1998910419.d9df05512&amp;amp;cid=34403&lt;/a>&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;p>&lt;a href="https://docusaurus.io/zh-CN/docs">https://docusaurus.io/zh-CN/docs&lt;/a>&lt;/p></description></item><item><title>开放平台appKey，appSecret设计</title><link>https://fengzhenbing.github.io/p/%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0appkeyappsecret%E8%AE%BE%E8%AE%A1/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0appkeyappsecret%E8%AE%BE%E8%AE%A1/</guid><description>&lt;h3 id="开放平台appkey-appsecret设计">开放平台appKey appSecret设计&lt;/h3>
&lt;h4 id="1手动注册客户端服务端返回appkey-appsecret--客户端和服务端都保存ak-as">1，手动注册客户端，服务端返回appKey appSecret 客户端和服务端都保存ak as&lt;/h4>
&lt;h4 id="2-客户端第一次请求-通过appkey请求token">2, 客户端第一次请求 通过appKey请求token&lt;/h4>
&lt;p>服务端通过appKey，appSecret，时间戳，用户的必要信息生成token，可以使用JWTToken.&lt;/p>
&lt;p>​ token具有有效期：&lt;strong>Token是客户端访问服务端的凭证。&lt;/strong>&lt;/p>
&lt;h4 id="3客户端后续请求">3，客户端后续请求&lt;/h4>
&lt;p>参数为： Token + 当前时间戳 + 参数 +签名sign1&lt;/p>
&lt;p>签名sign1为 &lt;code>Token + 当前时间戳 + 参数+appSecret&lt;/code> 按照一定签名算法比如 SHA256生成的签名字符串，&lt;strong>为了保证请求中参数不被流量劫持篡改&lt;/strong>&lt;/p>
&lt;h4 id="4服务端收到请求进行校验">4，服务端收到请求进行校验&lt;/h4>
&lt;ul>
&lt;li>时间戳校验：请求时间和当前服务端时间大于一定范围，比如5分钟，拒绝执行&lt;/li>
&lt;li>Token解析：token过期拒绝执行&lt;/li>
&lt;li>签名校验： 通过token解析获取到appKey，再获取到appSecret， 使用与客户端相同的签名算法SHA256得到签名sign2, 如果sign1不等于sign2，拒绝执行&lt;/li>
&lt;/ul></description></item><item><title>Prometheus监控JVM</title><link>https://fengzhenbing.github.io/p/prometheus%E7%9B%91%E6%8E%A7jvm/</link><pubDate>Sun, 15 Aug 2021 14:16:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/prometheus%E7%9B%91%E6%8E%A7jvm/</guid><description>&lt;h2 id="1-jmx_exporter">1. jmx_exporter&lt;/h2>
&lt;h3 id="下载jmx_exporter">下载jmx_exporter&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ubuntu:/# mkdir -p /usr/local/prometheus/jmx_exporter
ubuntu:/# &lt;span class="nb">cd&lt;/span> /usr/local/prometheus/jmx_exporter
ubuntu:/# wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.16.1/jmx_prometheus_javaagent-0.16.1.jar
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置文件jmx_exporter">配置文件jmx_exporter&lt;/h3>
&lt;p>jmx_exporter.yml&lt;/p>
&lt;pre>&lt;code> vim /usr/local/prometheus/jmx_exporter/jmx_exporter.yml
---
rules:
- pattern: &amp;quot;.*&amp;quot;
&lt;/code>&lt;/pre>&lt;h3 id="java-agent运行jmx_exporter">java agent运行jmx_exporter&lt;/h3>
&lt;p>以java agent的方式启动你的一个java应用&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">java -javaagent:/usr/local/prometheus/jmx_prometheus_javaagent-0.16.1.jar&lt;span class="o">=&lt;/span>3010:/usr/local/prometheus/jmx_exporter.yml -jar xxx-web-0.1-SNAPSHOT.jar
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-prometheus">2. prometheus&lt;/h2>
&lt;h3 id="docker方式下载运行">docker方式下载运行&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># docker pull prom/prometheus #下载docker镜像&lt;/span>
&lt;span class="c1"># mkdir -p /etc/prometheus&lt;/span>
&lt;span class="c1"># vim /etc/prometheus/prometheus.yml #配置&lt;/span>
&lt;span class="c1"># docker run -d \&lt;/span>
-p 192.168.3.13:9090:9090 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -v /etc/prometheus:/etc/prometheus &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> prom/prometheus&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="prometheus中配置上步的jmx的metrics">prometheus中配置上步的jmx的metrics&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="nt">global&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">15s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">evaluation_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">15s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">alerting&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">alertmanagers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">follow_redirects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">api_version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">static_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">targets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">scrape_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">job_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">prometheus&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">honor_timestamps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">15s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metrics_path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/metrics&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">follow_redirects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">static_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">targets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">192.168.3.13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">### 以下为jmx_exporter地址：需改为你实际的&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">job_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;jmx&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">static_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">15s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">targets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;192.168.3.14:3010&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="验证">验证&lt;/h3>
&lt;p>访问http://192.168.3.13:9090 可看到读取的jmx_exporter的metrics&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210815150732316.png" alt="image-20210815150732316" />&lt;/p>
&lt;h2 id="3-grafana连接prometheus">3. Grafana连接Prometheus&lt;/h2>
&lt;pre>&lt;code>docker pull grafana/grafana
docker run -d --name=grafana -p 3000:3000 grafana/grafana
&lt;/code>&lt;/pre>&lt;p>访问http://192.168.3.13:3000 使用admin/admin即可登录&lt;/p>
&lt;h3 id="配置prometheus数据源">配置prometheus数据源&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210815153009091.png" alt="image-20210815153009091" />&lt;/p>
&lt;h3 id="配置dashboard">配置dashboard&lt;/h3>
&lt;p>找一个合适的dashboard导入。如https://grafana.com/grafana/dashboards/3457&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210815160530374.png" alt="image-20210815160530374" />&lt;/p>
&lt;h3 id="效果">效果&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210815160638492.png" alt="image-20210815160638492" />&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>prometheus安装 &lt;a href="https://prometheus.io/docs/prometheus/latest/installation/">https://prometheus.io/docs/prometheus/latest/installation/&lt;/a>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>JMX Exporter 项目地址: &lt;a href="https://github.com/prometheus/jmx_exporter">https://github.com/prometheus/jmx_exporter&lt;/a>&lt;/li>
&lt;li>JVM 监控面板: &lt;a href="https://grafana.com/grafana/dashboards/3457">https://grafana.com/grafana/dashboards/3457&lt;/a>&lt;/li>
&lt;li>Grafana(&lt;a href="https://grafana.com/">https://grafana.com/&lt;/a>)&lt;/li>
&lt;/ul></description></item><item><title>mac下node升级</title><link>https://fengzhenbing.github.io/p/mac%E4%B8%8Bnode%E5%8D%87%E7%BA%A7/</link><pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/mac%E4%B8%8Bnode%E5%8D%87%E7%BA%A7/</guid><description>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 清除nodejs的cache&lt;/span>
sudo npm cache clean -f
&lt;span class="c1"># 由于您可能已经拥有node，最简单的安装方式n是npm：&lt;/span>
sudo npm install -g n
&lt;span class="c1"># node所有版本&lt;/span>
npm view node versions
&lt;span class="c1"># 升级到最新版本&lt;/span>
sudo n latest
&lt;span class="c1"># 升级到稳定版本&lt;/span>
sudo n stable
&lt;span class="c1"># 升级到具体版本号&lt;/span>
sudo n xx.xx
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Disruptor高性能队列</title><link>https://fengzhenbing.github.io/p/disruptor%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97/</link><pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/disruptor%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97/</guid><description>&lt;h2 id="disruptor通过以下设计来解决队列速度慢的问题">Disruptor通过以下设计来解决队列速度慢的问题：&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>环形数组结构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>元素位置定位&lt;/p>
&lt;p>数组长度2^n， 位运算，加快定位的速度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无锁设计&lt;/p>
&lt;p>Cas操作保证线程安全&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a href="https://tech.meituan.com/2016/11/18/disruptor.html">https://tech.meituan.com/2016/11/18/disruptor.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/liweisnake/article/details/9113119">https://blog.csdn.net/liweisnake/article/details/9113119&lt;/a>&lt;/p></description></item><item><title>Envoy</title><link>https://fengzhenbing.github.io/p/envoy/</link><pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/envoy/</guid><description>&lt;h2 id="envoy概述">Envoy概述&lt;/h2>
&lt;p>Envoy 是以 C++ 开发的高性能代理;&lt;/p>
&lt;p>其内置服务发现、负载均衡、TLS终止、HTTP/2、GRPC代理、熔断器、健康检查，基于百分比流量拆分的灰度发布、故障注入等功能&lt;/p>
&lt;p>&lt;img src="http://dockone.io/uploads/article/20190722/e56882465fb16ac21248567c621b90f9.png" alt="1.png" />&lt;/p>
&lt;ul>
&lt;li>Downstream：下游主机，指连接到Envoy的主机，这些主机用来发送请求并接受响应。&lt;/li>
&lt;li>Upstream：上游主机，指接收来自Envoy连接和请求的主机，并返回响应。&lt;/li>
&lt;li>Listener：服务或程序的监听器， Envoy暴露一个或多个监听器监听下游主机的请求，当监听到请求时，通过Filter Chain把对请求的处理全部抽象为Filter， 例如ReadFilter、WriteFilter、HttpFilter等。&lt;/li>
&lt;li>Cluster：服务提供集群，指Envoy连接的一组逻辑相同的上游主机。Envoy通过服务发现功能来发现集群内的成员，通过负载均衡功能将流量路由到集群的各个成员。&lt;/li>
&lt;li>xDS：xDS中的x是一个代词，类似云计算里的XaaS可以指代IaaS、PaaS、SaaS等。DS为Discovery Service，即发现服务的意思。xDS包括CDS（cluster discovery service）、RDS（route discovery service）、EDS（endpoint discovery service）、ADS（aggregated discovery service），其中ADS称为聚合的发现服务，是对CDS、RDS、LDS、EDS服务的统一封装，解决CDS、RDS、LDS、EDS信息更新顺序依赖的问题，从而保证以一定的顺序同步各类配置信息。以上Endpoint、Cluster、Route的概念介绍如下：
&lt;ul>
&lt;li>Endpoint：一个具体的“应用实例”，类似于Kubernetes中的一个Pod；&lt;/li>
&lt;li>Cluster：可以理解“应用集群”，对应提供相同服务的一个或多个Endpoint， 类似Kubernetes中Service概念，即一个Service提供多个相同服务的Pod；&lt;/li>
&lt;li>Route：当我们做金丝雀发布部署时，同一个服务会有多个版本，这时需要Route规则规定请求如何路由到其中的某个版本上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="http://www.dockone.io/article/9116">http://www.dockone.io/article/9116&lt;/a>&lt;/p></description></item><item><title>加密算法</title><link>https://fengzhenbing.github.io/p/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</guid><description>&lt;h3 id="哈希摘要算法">哈希摘要算法&lt;/h3>
&lt;p>好的哈希摘要算法需要具备&lt;/p>
&lt;ol>
&lt;li>
&lt;p>一是&lt;strong>易变性&lt;/strong>，这是指算法的输入端发生了任何一点细微变动，都会引发雪崩效应,使得输出端的结果产生极大的变化&lt;/p>
&lt;p>常常被用来校验数据是否被篡改&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二是&lt;strong>不可逆性&lt;/strong>，摘要的过程是单向的，不可能从摘要的结果中逆向还原出输入值来&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="对称加密和非对称加密">对称加密和非对称加密&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>对称加密
对称加密指的就是加密和解密使用&lt;strong>同一个&lt;/strong>秘钥，所以叫做对称加密。对称加密只有一个秘钥，作为私钥。
常见的对称加密算法：DES，3DES，AES等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非对称加密
非对称加密指的是：加密和解密使用&lt;strong>不同&lt;/strong>的秘钥，一把作为公开的公钥，另一把作为私钥。&lt;strong>公钥加密的信息，只有私钥才能解密。私钥加密的信息，只有公钥才能解密。&lt;/strong>
常见的非对称加密算法：RSA，ECC&lt;/p>
&lt;/li>
&lt;li>
&lt;p>区别
对称加密算法相比非对称加密算法来说，加解密的效率要高得多。但是缺陷在于对于秘钥的管理上，以及在非安全信道中通讯时，密钥交换的安全性不能保障。所以在实际的网络环境中，会将两者混合使用.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>对称加密传输大量数据&lt;/p>
&lt;p>非对称加密永远对称加密的密钥协商，传输。&lt;/p>
&lt;blockquote>
&lt;p>例如针对C/S模型，&lt;/p>
&lt;p>服务端计算出一对秘钥pub/pri。将私钥保密，将公钥公开。
客户端请求服务端时，拿到服务端的公钥pub。
客户端通过AES计算出一个对称加密的秘钥X。 然后使用pub将X进行加密。
客户端将加密后的密文发送给服务端。服务端通过pri解密获得X。
然后两边的通讯内容就通过对称密钥X以对称加密算法来加解密。&lt;/p>
&lt;/blockquote>
&lt;h3 id="三种密码学算法的对比">三种密码学算法的对比&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>特点&lt;/th>
&lt;th>常见实现&lt;/th>
&lt;th>主要用途&lt;/th>
&lt;th>主要局限&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>哈希摘要&lt;/td>
&lt;td>不可逆，即不能解密，所以并不是加密算法，只是一些场景把它当作加密算法使用。 易变性，输入发生 1 Bit 变动，就可能导致输出结果 50%的内容发生改变。 无论输入长度多少，输出长度固定（2 的 N 次幂）。&lt;/td>
&lt;td>MD2/4/5/6、SHA0/1/256/512&lt;/td>
&lt;td>摘要&lt;/td>
&lt;td>无法解密&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>对称加密&lt;/td>
&lt;td>加密是指加密和解密是一样的密钥。 设计难度相对较小，执行速度相对较块。 加密明文长度不受限制。&lt;/td>
&lt;td>DES、AES、RC4、IDEA&lt;/td>
&lt;td>加密&lt;/td>
&lt;td>要解决如何把密钥安全地传递给解密者。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>非对称加密&lt;/td>
&lt;td>加密和解密使用的是不同的密钥。 明文长度不能超过公钥长度。&lt;/td>
&lt;td>RSA、BCDSA、ElGamal&lt;/td>
&lt;td>签名、传递密钥&lt;/td>
&lt;td>性能与加密明文长度受限。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="数字证书">数字证书&lt;/h3>
&lt;p>解决公钥被劫持篡改的问题。由权威机构颁发保证&lt;/p>
&lt;h3 id="https--http-over-ssltls">HTTPS: HTTP over SSL/TLS&lt;/h3>
&lt;p>TLS处于会话层&lt;/p>
&lt;p>客户端和服务端均通过握手过程协商出了许多信息，譬如一个只有双方才知道的随机产生的密钥(非对称加密算法比如RSA进行密钥协商)、传输过程中要采用的对称加密算法（比如AES128）、压缩算法等，此后该连接的通信将使用此密钥和加密算法进行加密、解密和压缩。&lt;/p>
&lt;p>保障所有信息都是第三方无法窃听（加密传输:对称加密算法）、无法篡改（一旦篡改通信算法会立刻发现）、无法冒充（证书验证身份）&lt;/p></description></item><item><title>图解shenyu</title><link>https://fengzhenbing.github.io/p/%E5%9B%BE%E8%A7%A3shenyu/</link><pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E5%9B%BE%E8%A7%A3shenyu/</guid><description>&lt;h3 id="spi">spi&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210822220553452.png" alt="image-20210822220553452" />&lt;/p>
&lt;h3 id="数据同步">数据同步&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210822220755858.png" alt="image-20210822220755858" />&lt;/p>
&lt;h3 id="请求执行路径">请求执行路径&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210822220834008.png" alt="image-20210822220834008" />&lt;/p>
&lt;h3 id="服务调用">服务调用&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210822220248073.png" alt="image-20210822220248073" />&lt;/p>
&lt;h3 id="admin定时探活">admin定时探活&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210822221107509.png" alt="image-20210822221107509" />&lt;/p></description></item><item><title>服务链路追踪</title><link>https://fengzhenbing.github.io/p/%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</link><pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>随着业务的发展，系统规模也会越来越大，各微服务间的调用关系也越来越错综复杂，每一个前端请求都会形成一条复杂的分布式服务调用链路，在每条链路中任何一个依赖服务出现延迟过高或错误的时候都会引起请求最后的失败。&lt;/p>
&lt;h2 id="链路追踪原理">链路追踪原理&lt;/h2>
&lt;h3 id="实现请求跟踪">实现请求跟踪&lt;/h3>
&lt;p>当请求发送到分布式系统的入口端点时，只需要服务跟踪框架为该请求创建一个唯一的跟踪标识&lt;strong>Trace ID&lt;/strong>，&lt;/p>
&lt;p>同时在分布式系统内部流转的时候，框架失踪保持该唯一标识，直到返回给请求方位置。&lt;/p>
&lt;p>&lt;strong>trace&lt;/strong>：&lt;strong>服务追踪的追踪单元&lt;/strong>是从客户发起请求（request）抵达被追踪系统的边界开始，到被追踪系统向客户返回响应（response）为止的过程，称为一&lt;/p>
&lt;p>个“trace”&lt;/p>
&lt;h3 id="统计各处理单元的时间延迟">统计各处理单元的时间延迟&lt;/h3>
&lt;p>当请求到达各个服务组件时，也是通过一个唯一标识&lt;strong>Span ID&lt;/strong>来标记它的开始，具体过程以及结束。对每一个Span来说，它必须有开始和结束两个节点，通过记录开始Span和结束Span的时间戳，就能统计出该Span的时间延迟，除了时间戳记录之外，它还可以包含一些其他元数据，比如时间名称、请求信息等。&lt;/p>
&lt;h3 id="ui可视化">UI可视化&lt;/h3>
&lt;h2 id="apm技术组件">APM技术组件&lt;/h2>
&lt;h3 id="zipkinsleuth">Zipkin+Sleuth&lt;/h3>
&lt;h3 id="apache-skywalking">Apache SkyWalking&lt;/h3>
&lt;h3 id="cat">Cat&lt;/h3>
&lt;h3 id="pinpoint">Pinpoint&lt;/h3>
&lt;h3 id="特点对比">特点对比&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210719093354996.png" alt="image-20210719093354996" />&lt;/p></description></item><item><title>k8s Kubectl命令</title><link>https://fengzhenbing.github.io/p/k8s-kubectl%E5%91%BD%E4%BB%A4/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/k8s-kubectl%E5%91%BD%E4%BB%A4/</guid><description>&lt;h2 id="kubelet日志">kubelet日志&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">journalctl -fu kubelet
kubectl -h
kubectl get namespaces
kubectl get pods -A
kubectl logs -f --tail&lt;span class="o">=&lt;/span>&lt;span class="m">200&lt;/span> -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>account -n bookstore-microservices
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常用命令">常用命令&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#查看端口映射&lt;/span>
kubectl get svc -n kube-system
&lt;span class="c1">#查看 secret&lt;/span>
kubectl get secret -n kube-system
&lt;span class="c1">#查看 token&lt;/span>
kubectl describe secret kubernetes-dashboard --namespace&lt;span class="o">=&lt;/span>kube-system
&lt;span class="c1">#k8s 无法启动，查看日志，查找Failed&lt;/span>
journalctl -xefu kubelet
&lt;span class="c1">#查看pod错误日志&lt;/span>
kubectl logs kubernetes-dashboard-8556c848b7-4kpzd --namespace&lt;span class="o">=&lt;/span>kube-system
&lt;span class="c1">#对资源进行配置&lt;/span>
kubectl apply -f kubernetes-dashboard.yaml
kubectl delete -f kubernetes-dashboard.ya
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="yaml配置文件管理对象">YAML配置文件管理对象&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">对象管理：
&lt;span class="c1"># 创建deployment资源&lt;/span>
kubectl create -f nginx-deployment.yaml
&lt;span class="c1"># 查看deployment&lt;/span>
kubectl get deploy
&lt;span class="c1"># 查看ReplicaSet&lt;/span>
kubectl get rs
&lt;span class="c1"># 查看pods所有标签&lt;/span>
kubectl get pods --show-labels
&lt;span class="c1"># 根据标签查看pods&lt;/span>
kubectl get pods -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;span class="c1"># 滚动更新镜像&lt;/span>
kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.11
或者
kubectl edit deployment/nginx-deployment
或者
kubectl apply -f nginx-deployment.yaml
&lt;span class="c1"># 实时观察发布状态：&lt;/span>
kubectl rollout status deployment/nginx-deployment
&lt;span class="c1"># 查看deployment历史修订版本&lt;/span>
kubectl rollout &lt;span class="nb">history&lt;/span> deployment/nginx-deployment
kubectl rollout &lt;span class="nb">history&lt;/span> deployment/nginx-deployment --revision&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span>
&lt;span class="c1"># 回滚到以前版本&lt;/span>
kubectl rollout undo deployment/nginx-deployment
kubectl rollout undo deployment/nginx-deployment --to-revision&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span>
&lt;span class="c1"># 扩容deployment的Pod副本数量&lt;/span>
kubectl scale deployment nginx-deployment --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;span class="c1"># 设置启动扩容/缩容&lt;/span>
kubectl autoscale deployment nginx-deployment --min&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span> --max&lt;span class="o">=&lt;/span>&lt;span class="m">15&lt;/span> --cpu-percent&lt;span class="o">=&lt;/span>&lt;span class="m">80&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>架构演变</title><link>https://fengzhenbing.github.io/p/%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/</guid><description>&lt;h2 id="单体架构spring-boot">单体架构(spring boot)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>优点：所有代码都运行在同一个进程空间之内，所有模块、方法的调用都无须考虑网络分区、对象复制这些麻烦的事和性能损失。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点：损失了各个功能模块的自治、隔离能力；&lt;/p>
&lt;p>​ 由于隔离能力的缺失难以阻断错误传播、不便于动态更新程序以外，还面临难以技术异构的困难&lt;/p>
&lt;p>​ 可以 使用OSGi 这种运行时模块化框架，但是太复杂了。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="soa-架构service-oriented-architecture">SOA 架构（Service-Oriented Architecture）&lt;/h2>
&lt;p>面向服务的架构是一次具体地、系统性地成功解决分布式服务主要问题的架构模式。&lt;/p>
&lt;p>SOAP 协议被逐渐边缘化的本质原因：过于严格的规范定义带来过度的复杂性。而构建在 SOAP 基础之上的 ESB、BPM、SCA、SDO 等诸多上层建筑，进一步加剧了这种复杂性。&lt;/p>
&lt;h2 id="微服务架构spring-cloud">微服务架构(spring cloud)&lt;/h2>
&lt;p>微服务是一种软件开发技术，是一种 SOA 的变体形式。&lt;/p>
&lt;p>升级背景：&lt;/p>
&lt;ul>
&lt;li>制约软件质量与业务能力提升的最大因素是人而非硬件： 单体架构没有什么有效阻断错误传播的手段&lt;/li>
&lt;li>技术异构的需求从可选渐渐成为必须：很多 Java 不擅长的事情 人工智能python 分布式协调工具 Etcd ,NSI C 编写的 Redis，&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>由于隔离能力的缺失，单体除了难以阻断错误传播、不便于动态更新程序以外，还面临难以技术异构的困难，每个模块的代码都通常需要使用一样的程序语言，乃至一样的编程框架去开发。&lt;/p>
&lt;p>随着软件架构演进，构筑可靠系统从“追求尽量不出错”，到正视“出错是必然”的观念转变，才是微服务架构得以挑战并逐步开始取代运作了数十年的单体架构的底气所在&lt;/p>
&lt;p>微服务时代充满着自由的气息，微服务时代充斥着迷茫的选择。&lt;/p>
&lt;h2 id="微服务架构kubernetes">微服务架构(Kubernetes)&lt;/h2>
&lt;p>升级背景：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>微服务中的各种新技术名词，如配置中心、服务发现、网关、熔断、负载均衡等等带来的技术组件 Config、Eureka、Zuul、Hystrix、Ribbon、Feign 等&lt;/p>
&lt;p>占据了产品的大部分编译后的代码容量&lt;/p>
&lt;p>之前在应用层面而不是基础设施层面去解决这些分布式问题，完全是因为由硬件构成的基础设施，跟不上由软件构成的应用服务的灵活性的无奈之举&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以 Docker Swarm、Apache Mesos 与 Kubernetes 为主要竞争者的“容器战争”终于有了明确的结果，Kubernetes 登基加冕&lt;/p>
&lt;p>容器动态构建出 DNS 服务器、服务负载均衡器等一系列虚拟化的基础设施，去代替原有的应用层面的技术组件&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Microservice&lt;/em> &lt;a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html&lt;/a>&lt;/p>
&lt;h2 id="服务网格service-mesh">服务网格（Service Mesh）&lt;/h2>
&lt;p>升级背景：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>基础设施是针对整个容器来管理的，粒度相对粗旷，只能到容器层面，对单个远程服务就很难有效管控。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务的监控、认证、授权、安全、负载均衡等都有可能面临细化管理的需求&lt;/p>
&lt;p>譬如服务调用时的负载均衡，往往需要根据流量特征，调整负载均衡的层次、算法，等等，而 DNS 尽管能实现一定程度的负载均衡，但通常并不能满足这些额外的需求。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="边车代理模式sidecar-proxy">“边车代理模式”（Sidecar Proxy）&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>数据平面通信：这个代理除了实现正常的服务间通信外（称为数据平面通信）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>控制平面通信：还接收来自控制器的指令（称为控制平面通信），根据控制平面中的配置，对数据平面通信的内容进行分析处理，以实现熔断、认证、度量、监控、负载均衡等各种附加功能。&lt;/p>
&lt;p>通过&lt;/p>
&lt;p>主要框架：&lt;a class="link" href="![]%28https://gitee.com/fengzhenbing/picgo/raw/master/image-20210721231153297.png%29" >Istio&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210721231153297.png" alt="image-20210721231153297" />&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>上帝的归上帝，凯撒的归凯撒，业务与技术完全分离，远程与本地完全透明，也许这就是最好的时代了吧？&lt;/p>
&lt;h2 id="无服务">无服务&lt;/h2>
&lt;p>更应该成为 无服务器&lt;/p>
&lt;p>包含两方面：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>后端设施&lt;/strong>：指数据库、消息队列、日志、存储，等等这一类用于支撑业务逻辑运行，但本身无业务含义的技术组件，这些后端设施都运行在云中，无服务中称其为“后端即服务”（Backend as a Service，BaaS）。&lt;/li>
&lt;li>&lt;strong>函数&lt;/strong>： 指业务逻辑代码，这里函数的概念与粒度，都已经很接近于程序编码角度的函数了，其区别是无服务中的函数运行在云端，不必考虑算力问题，不必考虑容量规划（从技术角度可以不考虑，从计费的角度你的钱包够不够用还是要掂量一下的），无服务中称其为“函数即服务”（Function as a Service，FaaS）。&lt;/li>
&lt;/ul>
&lt;p>学习参考https://icyfenix.cn/architecture/architect-history/&lt;/p></description></item><item><title>Kubeadm安装Kubernetes</title><link>https://fengzhenbing.github.io/p/kubeadm%E5%AE%89%E8%A3%85kubernetes/</link><pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/kubeadm%E5%AE%89%E8%A3%85kubernetes/</guid><description>&lt;h2 id="1环境准备">1.环境准备&lt;/h2>
&lt;p>安装 Kubernetes 最小需要 2 核处理器、2 GB 内存，且为 x86 架构（暂不支持 ARM 架构)&lt;/p>
&lt;p>本次实验操作系统：ubantu 20.04LTS&lt;/p>
&lt;p>Kubernetes 并不在主流 Debian 系统自带的软件源中，所以要手工注册，然后才能使用&lt;code>apt-get&lt;/code>安装&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 添加GPG Key&lt;/span>
$ sudo curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg &lt;span class="p">|&lt;/span> sudo apt-key add -
&lt;span class="c1"># 添加K8S软件源&lt;/span>
$ sudo add-apt-repository &lt;span class="s2">&amp;#34;deb https://apt.kubernetes.io/ kubernetes-xenial main&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不能科学上网，可以使用阿里云的软件源地址&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 添加GPG Key&lt;/span>
$ curl -fsSL http://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg &lt;span class="p">|&lt;/span> sudo apt-key add -
&lt;span class="c1"># 添加K8S软件源&lt;/span>
$ sudo add-apt-repository &lt;span class="s2">&amp;#34;deb http://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加源后需要更新&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">sudo apt-get update
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-安装-kubeletkubectlkubeadm">2. 安装 &lt;strong>kubelet&lt;/strong>、&lt;strong>kubectl&lt;/strong>、&lt;strong>kubeadm&lt;/strong>&lt;/h2>
&lt;p>官网介绍：https://kubernetes.io/docs/reference/setup-tools/kubeadm/&lt;/p>
&lt;ul>
&lt;li>kubeadm: 引导启动 Kubernate 集群的命令行工具。&lt;/li>
&lt;li>kubelet: 在群集中的所有计算机上运行的组件, 并用来执行如启动 Pods 和 Containers 等操作。&lt;/li>
&lt;li>kubectl: 用于操作运行中的集群的命令行工具。&lt;/li>
&lt;/ul>
&lt;h3 id="21关闭swap-分区">2.1关闭Swap 分区&lt;/h3>
&lt;p>kubeadm 初始化集群之前，需要关闭Swap 分区，首先基于安全性（如在官方文档中承诺的 Secret 只会在内存中读写，不会落盘）、利于保证节点同步一致性等原因，从 1.8 版开始，Kubernetes 就在它的文档中明确声明了它默认&lt;strong>不支持&lt;/strong>Swap 分区，在未关闭 Swap 分区的机器中，集群将直接无法启动；&lt;/p>
&lt;p>其他参考&lt;/p>
&lt;blockquote>
&lt;p>主要有两个方面原因：&lt;/p>
&lt;p>第一是因为性能问题，在生产环境我们经常会遇到容器性能突然降低的情况，查看原因后，大部分都是因为开启了swap导致的。swap看似解决了有限内存的问题，但这种通过时间换空间的做法也给性能带来了很大问题，尤其是在高并发场景中，很容易导致系统不稳定。&lt;/p>
&lt;p>第二是因为k8s定义的资源模型中，CPU和内存都是确定的可用资源，在调度的时候都会考虑在内。比如，设置了内存设置了limit 2G，就代表最大可用内存是2G，而引入swap（cgroup支持swap限制）后这个模型就变得复杂了，而且需要结合Qos，swap的使用完全是由操作系统根据水位自行调节的，并不直接受kubelet管理&lt;/p>
&lt;/blockquote>
&lt;p>一次性关闭&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">sudo swapoff -a
&lt;/code>&lt;/pre>&lt;/div>&lt;p>永久关闭&lt;/p>
&lt;p>编辑器打开&lt;code>/etc/fstab&lt;/code>，注释其中带有“swap”的行即可，&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 先备份&lt;/span>
$ yes &lt;span class="p">|&lt;/span> sudo cp /etc/fstab /etc/fstab_bak
&lt;span class="c1"># 进行修改&lt;/span>
$ sudo cat /etc/fstab_bak &lt;span class="p">|&lt;/span> grep -v swap &amp;gt; /etc/fstab
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-预拉取镜像">3 预拉取镜像&lt;/h2>
&lt;p>先查看kubeadm版本 v1.21.3&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">root@fengzhenbing-ubuntu:/home/fengzhenbing# kubeadm version
kubeadm version: &lt;span class="p">&amp;amp;&lt;/span>version.Info&lt;span class="o">{&lt;/span>Major:&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>, Minor:&lt;span class="s2">&amp;#34;21&amp;#34;&lt;/span>, GitVersion:&lt;span class="s2">&amp;#34;v1.21.3&amp;#34;&lt;/span>, GitCommit:&lt;span class="s2">&amp;#34;ca643a4d1f7bfe34773c74f79527be4afd95bf39&amp;#34;&lt;/span>, GitTreeState:&lt;span class="s2">&amp;#34;clean&amp;#34;&lt;/span>, BuildDate:&lt;span class="s2">&amp;#34;2021-07-15T21:03:28Z&amp;#34;&lt;/span>, GoVersion:&lt;span class="s2">&amp;#34;go1.16.6&amp;#34;&lt;/span>, Compiler:&lt;span class="s2">&amp;#34;gc&amp;#34;&lt;/span>, Platform:&lt;span class="s2">&amp;#34;linux/amd64&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先使用以下命令查询当前版本需要哪些镜像：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">fengzhenbing@fengzhenbing-ubuntu:/etc/docker$ kubeadm config images list --kubernetes-version v1.21.3
k8s.gcr.io/kube-apiserver:v1.21.3
k8s.gcr.io/kube-controller-manager:v1.21.3
k8s.gcr.io/kube-scheduler:v1.21.3
k8s.gcr.io/kube-proxy:v1.21.3
k8s.gcr.io/pause:3.4.1
k8s.gcr.io/etcd:3.4.13-0
k8s.gcr.io/coredns/coredns:v1.8.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>k8s.gcr.io 为google官方（Google Container Registry），对于不能科学上网的同学来说，可以使用阿里云加速&lt;/p>
&lt;h3 id="31-配置阿里云加速地址">3.1 配置阿里云加速地址&lt;/h3>
&lt;p>阿里云加速地址获取 &lt;a href="https://cr.console.aliyun.com/cn-shanghai/instances/mirrors">https://cr.console.aliyun.com/cn-shanghai/instances/mirrors&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210725221057446.png" alt="image-20210725221057446" />&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">sudo tee /etc/docker/daemon.json &lt;span class="s">&amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
&lt;/span>&lt;span class="s">{
&lt;/span>&lt;span class="s"> &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://xxxx.mirror.aliyuncs.com&amp;#34;]
&lt;/span>&lt;span class="s">}
&lt;/span>&lt;span class="s">EOF&lt;/span>
sudo systemctl daemon-reload
sudo systemctl restart docker
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="32-拉取镜像修改tag">3.2 拉取镜像，修改tag&lt;/h3>
&lt;p>对于通过&lt;code>kubeadm config images list --kubernetes-version v1.21.3&lt;/code>查找到需要下载的镜像名称及版本后，可以从&lt;a class="link" href="https://hub.docker.com/" target="_blank" rel="noopener"
>DockerHub&lt;/a>上找存有相同镜像的仓库来拉取。 我是用的&lt;a class="link" href="https://hub.docker.com/r/k8simage/kube-proxy" target="_blank" rel="noopener"
>k8simage&lt;/a>的仓库，找到对应的v1.21.3版本的对应image&lt;/p>
&lt;p>下面为从k8simage拉取到的镜像&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">fengzhenbing@fengzhenbing-ubuntu:/etc/docker$ sudo docker image list
REPOSITORY TAG IMAGE ID CREATED SIZE
k8simage/kube-apiserver v1.21.3 3d174f00aa39 &lt;span class="m">9&lt;/span> days ago 126MB
k8simage/kube-scheduler v1.21.3 6be0dc1302e3 &lt;span class="m">9&lt;/span> days ago 50.6MB
k8simage/kube-controller-manager v1.21.3 bc2bb319a703 &lt;span class="m">9&lt;/span> days ago 120MB
k8simage/kube-proxy v1.21.3 adb2816ea823 &lt;span class="m">9&lt;/span> days ago 103MB
k8simage/pause 3.4.1 0f8457a4c2ec &lt;span class="m">6&lt;/span> months ago 683kB
k8simage/etcd 3.4.13-0 0369cf4303ff &lt;span class="m">11&lt;/span> months ago 253MB
k8simage/coredns 1.7.0 bfe3a36ebd25 &lt;span class="m">13&lt;/span> months ago 45.2MB
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对每一镜像，1先拉取，2修改tag 3最后删除原来的。以kube-apiserver v1.21.3为例子&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">sudo docker pull k8simage/kube-apiserver:v1.21.3
sudo docker tag k8simage/kube-apiserver:v1.21.3 k8s.gcr.io/kube-apiserver:v1.21.3
sudo docker rmi k8simage/kube-apiserver:v1.21.3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面全部操作结束后 可看到都更新为&lt;code>kubeadm config images list --kubernetes-version v1.21.3&lt;/code>所需要的镜像了&lt;/p>
&lt;pre>&lt;code>root@fengzhenbing-ubuntu:/home/fengzhenbing# sudo docker image list
REPOSITORY TAG IMAGE ID CREATED SIZE
k8s.gcr.io/kube-apiserver v1.21.3 3d174f00aa39 9 days ago 126MB
k8s.gcr.io/kube-scheduler v1.21.3 6be0dc1302e3 9 days ago 50.6MB
k8s.gcr.io/kube-proxy v1.21.3 adb2816ea823 9 days ago 103MB
k8s.gcr.io/kube-controller-manager v1.21.3 bc2bb319a703 9 days ago 120MB
quay.io/coreos/flannel v0.14.0 8522d622299c 2 months ago 67.9MB
k8s.gcr.io/pause 3.4.1 0f8457a4c2ec 6 months ago 683kB
k8s.gcr.io/etcd 3.4.13-0 0369cf4303ff 11 months ago 253MB
k8s.gcr.io/coredns/coredns v1.8.0 bfe3a36ebd25 13 months ago 45.2MB
&lt;/code>&lt;/pre>&lt;h2 id="4-初始化集群控制平面">4 初始化集群控制平面&lt;/h2>
&lt;ul>
&lt;li>确保 kubelet 是开机启动的&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>fengzhenbing@fengzhenbing-ubuntu:/etc/docker$ sudo systemctl start kubelet
fengzhenbing@fengzhenbing-ubuntu:/etc/docker$ sudo systemctl enable kubelet
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>su 直接切换到 root 用户， 保证是root启动部署&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>kubeadm init \
--pod-network-cidr=10.244.0.0/16 \
--kubernetes-version v1.21.3 \
--control-plane-endpoint 192.168.3.13
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>参数介绍&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>--kubernetes-version&lt;/code>参数（要注意版本号与 kubelet 一致）的目的是与前面预拉取是一样的，避免额外的网络访问去查询版本号；如果能够科学上网，不需要加这个参数。&lt;/p>
&lt;p>&lt;code>--pod-network-cidr&lt;/code>参数是给Flannel网络做网段划分使用的，着在稍后介绍完 CNI 网络插件时会去说明。&lt;/p>
&lt;p>&lt;code>--control-plane-endpoint&lt;/code>参数是控制面的地址，强烈建议使用一个域名代替直接的IP地址来建立Kubernetes集群。因为CA证书直接与地址相关，Kubernetes中诸多配置（配置文件、ConfigMap资源）也直接存储了这个地址，一旦更换IP，要想要不重置集群，手工换起来异常麻烦。所以最好使用hostname（仅限单节点实验）或者dns name。&lt;/p>
&lt;/blockquote>
&lt;p>执行完，如下提示表明成功&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210725225837358.png" alt="image-20210725225837358" />&lt;/p>
&lt;h2 id="5-为当前用户生成-kubeconfig">5 为当前用户生成 &lt;strong>kubeconfig&lt;/strong>&lt;/h2>
&lt;p>使用 Kubernetes 前需要为当前用户先配置好 admin.conf 文件&lt;/p>
&lt;pre>&lt;code>root@fengzhenbing-ubuntu:~# mkdir -p $HOME/.kube
root@fengzhenbing-ubuntu:~# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
root@fengzhenbing-ubuntu:~# sudo chown $(id -u):$(id -g) $HOME/.kube/config
&lt;/code>&lt;/pre>&lt;h2 id="6-cni插件">6 CNI插件&lt;/h2>
&lt;p>CNI 即“容器网络接口”&lt;/p>
&lt;p>部署 Kubernetes 时，我们可以有两种网络方案使得以后受管理的容器之间进行网络通讯：&lt;/p>
&lt;ul>
&lt;li>使用 Kubernetes 的默认网络： 操作太复杂&lt;/li>
&lt;li>使用 CNI 及其插件：&lt;/li>
&lt;/ul>
&lt;p>Flannel 插件为比较推荐的&lt;/p>
&lt;h3 id="安装flannel-插件">安装Flannel 插件&lt;/h3>
&lt;pre>&lt;code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://raw.githubusercontent.com">https://raw.githubusercontent.com&lt;/a> 无法访问时，可以找到该yml文件上传到服务器，如下执行&lt;/p>
&lt;pre>&lt;code>root@fengzhenbing-ubuntu:/home/fengzhenbing# kubectl apply -f kube-flannel.yml
Warning: policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+
podsecuritypolicy.policy/psp.flannel.unprivileged created
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.apps/kube-flannel-ds created
&lt;/code>&lt;/pre>&lt;pre>&lt;code>$ kubectl taint nodes --all node-role.kubernetes.io/master-
&lt;/code>&lt;/pre>&lt;h2 id="7-kubectl-命令自动补全功能">7 &lt;strong>kubectl&lt;/strong> 命令自动补全功能&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;source &amp;lt;(kubectl completion bash)&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;source /usr/share/bash-completion/bash_completion&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="8-加入其他-node-节点到-kubernetes-集群中">8 加入其他 &lt;strong>Node&lt;/strong> 节点到 &lt;strong>Kubernetes&lt;/strong> 集群中&lt;/h2>
&lt;p>kubeadm init执行成功后的反馈内容中有提到：如上面的截图&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">You can now join any number of control-plane nodes by copying certificate authorities
and service account keys on each node and &lt;span class="k">then&lt;/span> running the following as root:
kubeadm join 192.168.3.13:6443 --token qxu02l.g995k2yhkxjh3k80 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --discovery-token-ca-cert-hash sha256:b9887f55b739bd89d3b0dbb038e693df9b5b7d9759902ffb2a250288ba1ffc25 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --control-plane
Then you can join any number of worker nodes by running the following on each as root:
kubeadm join 192.168.3.13:6443 --token qxu02l.g995k2yhkxjh3k80 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --discovery-token-ca-cert-hash sha256:b9887f55b739bd89d3b0dbb038e693df9b5b7d9759902ffb2a250288ba1ffc25
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Token 的有效时间为 24 小时，如果超时，使用以下命令重新获取：&lt;/p>
&lt;pre>&lt;code>$ kubeadm token create --print-join-command
&lt;/code>&lt;/pre>&lt;h2 id="9相关问题">9相关问题&lt;/h2>
&lt;p>无法访问api端点如下&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210725233415235.png" alt="image-20210725233415235" />&lt;/p>
&lt;p>对于实验测试非线上来讲，可以直接将&lt;code>system:anonymous&lt;/code>加为用户&lt;/p>
&lt;pre>&lt;code>kubectl create clusterrolebinding test:anonymous --clusterrole=cluster-admin --user=system:anonymous
&lt;/code>&lt;/pre>&lt;p>对于正式环境，需要创建一个用户并授权&lt;/p>
&lt;h2 id="heading">&lt;/h2></description></item><item><title>优雅停机</title><link>https://fengzhenbing.github.io/p/%E4%BC%98%E9%9B%85%E5%81%9C%E6%9C%BA/</link><pubDate>Wed, 19 May 2021 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/%E4%BC%98%E9%9B%85%E5%81%9C%E6%9C%BA/</guid><description>&lt;h3 id="1-shutdownhook初识">1, ShutdownHook初识&lt;/h3>
&lt;blockquote>
&lt;p>在Java程序中可以通过添加关闭钩子，实现在程序退出时关闭资源、平滑退出的功能。
并且在以下几种场景将调用该钩子&lt;/p>
&lt;ol>
&lt;li>程序正常退出&lt;/li>
&lt;li>使用System.exit()&lt;/li>
&lt;li>终端使用Ctrl+C触发的中断&lt;/li>
&lt;li>系统关闭&lt;/li>
&lt;li>使用Kill pid命令干掉进程&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>具体来讲Runtime.addShutdownHook 添加钩子到 ApplicationShutdownHooks中。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// Runtime添加钩子（钩子具体来讲就是一个要执行的线程任务）
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addShutdownHook&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">hook&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SecurityManager&lt;/span> &lt;span class="n">sm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSecurityManager&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">sm&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">sm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">checkPermission&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">RuntimePermission&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;shutdownHooks&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">ApplicationShutdownHooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hook&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// Runtime去除钩子
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">removeShutdownHook&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">hook&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SecurityManager&lt;/span> &lt;span class="n">sm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSecurityManager&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">sm&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">sm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">checkPermission&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">RuntimePermission&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;shutdownHooks&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ApplicationShutdownHooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hook&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再看ApplicationShutdownHooks&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">ApplicationShutdownHooks&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/* The set of registered hooks */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">IdentityHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">hooks&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Shutdown&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="cm">/* shutdown hook invocation order */&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="kc">false&lt;/span> &lt;span class="cm">/* not registered if shutdown in progress */&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">runHooks&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">);&lt;/span>
&lt;span class="n">hooks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IdentityHashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IllegalStateException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// application shutdown hooks cannot be added if
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// shutdown is in progress.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">hooks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">ApplicationShutdownHooks&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;span class="cm">/* Add a new shutdown hook. Checks the shutdown state and the hook itself,
&lt;/span>&lt;span class="cm"> * but does not do any security checks.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">hook&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hooks&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Shutdown in progress&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hook&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isAlive&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hook already running&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">containsKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hook&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hook previously registered&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">hooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hook&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hook&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/* Remove a previously-registered hook. Like the add method, this method
&lt;/span>&lt;span class="cm"> * does not do any security checks.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">hook&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hooks&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Shutdown in progress&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hook&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NullPointerException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">hooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hook&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/* Iterates over all application hooks creating a new thread for each
&lt;/span>&lt;span class="cm"> * to run in. Hooks are run concurrently and this method waits for
&lt;/span>&lt;span class="cm"> * them to finish.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">runHooks&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">synchronized&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApplicationShutdownHooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keySet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">hooks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">hook&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">hook&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">hook&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">hook&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">join&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">ignored&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-自定义hooks">2, 自定义hooks&lt;/h3>
&lt;p>往往在应用程序里已经有了一些第三方注册好的hook, 当我们要对将自己自定义的hook放到其他hook之前执行，需要强制干预ApplicationShutdownHooks的hooks，可以通过反射来做&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">String&lt;/span> &lt;span class="n">className&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;java.lang.ApplicationShutdownHooks&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">className&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Field&lt;/span> &lt;span class="n">field&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;hooks&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">field&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 先反射拿到其他的hook,
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">IdentityHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">otherHookMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IdentityHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span> &lt;span class="n">field&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 将otherHookMap 中 各个hook封装一个延时（比如3s）
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 再将自定义hook 加入
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Runtime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRuntime&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">addShutdownHook&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(()-&amp;gt;{&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;exec my hook&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="o">}));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-shenyu中应用">3, ShenYu中应用&lt;/h3>
&lt;p>ShenYu项目下线时，会将一些client服务，比如注册中心客户端，优雅停掉。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ShenyuClientShutdownHook&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 钩子名称
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">hookNamePrefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;ShenyuClientShutdownHook&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">AtomicInteger&lt;/span> &lt;span class="n">hookId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicInteger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Properties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span> &lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//等待加入延时，但是还没有加入的hooks
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">IdentityHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">delayHooks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IdentityHashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="c1">//已经做了延时的hook
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">IdentityHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">delayedHooks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IdentityHashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Add shenyu client shutdown hook.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param result ShenyuClientRegisterRepository
&lt;/span>&lt;span class="cm"> * @param props Properties
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">ShenyuClientRegisterRepository&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Properties&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hookNamePrefix&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;-&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">hookId&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">incrementAndGet&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Runtime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRuntime&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">addShutdownHook&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">},&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Add hook {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ShenyuClientShutdownHook&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Delay other shutdown hooks.// 将其他的hooks做延时处理
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">delayOtherHooks&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">delay&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareAndSet&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">TakeoverOtherHooksThread&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TakeoverOtherHooksThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Delay other shutdown hooks thread.
&lt;/span>&lt;span class="cm"> * 延时处理的线程， 1，反射拿到其他hooks
&lt;/span>&lt;span class="cm"> * 2，遍历hooks,通过线程包装原先的hook线程任务，并在其中加3s的延时
&lt;/span>&lt;span class="cm"> * 3，将原先的hook线程任务重新加入到ApplicationShutdownHooks中
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TakeoverOtherHooksThread&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@SneakyThrows&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">shutdownWaitTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parseInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;shutdownWaitTime&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;3000&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">delayOtherHooksExecTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parseInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;delayOtherHooksExecTime&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;2000&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;applicationShutdownHooksClassName&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;java.lang.ApplicationShutdownHooks&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">Field&lt;/span> &lt;span class="n">field&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;applicationShutdownHooksFieldName&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;hooks&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">field&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">IdentityHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">hooks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IdentityHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span> &lt;span class="n">field&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">delayOtherHooksExecTime&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">iterator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keySet&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">iterator&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasNext&lt;/span>&lt;span class="o">();)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span> &lt;span class="n">hook&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hook&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">startsWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hookNamePrefix&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">// 为当前自己自定义的hook 就不做延时
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">delayHooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">containsKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hook&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">delayedHooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">containsKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hook&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">Thread&lt;/span> &lt;span class="n">delayHook&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">// 通过线程包装原先的hook线程任务，并在其中加3s的延时
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sleep {}ms&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">shutdownWaitTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">shutdownWaitTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">hook&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">},&lt;/span> &lt;span class="n">hook&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">delayHooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">delayHook&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">delayHook&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">// 加入的待加入延时集合
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">// 从原来的ApplicationShutdownHooks的hooks集合中去掉
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">iterator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">delayHooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keySet&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">iterator&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasNext&lt;/span>&lt;span class="o">();)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span> &lt;span class="n">delayHook&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Runtime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRuntime&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">addShutdownHook&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">delayHook&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">// 加入到ApplicationShutdownHooks的hooks集合中去掉
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">delayedHooks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">delayHook&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">delayHook&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;hook {} will sleep {}ms when it start&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">delayHook&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">shutdownWaitTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">hookNamePrefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">hookId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">delayHooks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">delayedHooks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>jvm垃圾回收</title><link>https://fengzhenbing.github.io/p/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description>&lt;h2 id="jvm垃圾回收">jvm垃圾回收&lt;/h2>
&lt;h3 id="对象存活判断算法">对象存活判断算法&lt;/h3>
&lt;h4 id="引用计数算法">引用计数算法&lt;/h4>
&lt;p>问题： 可能存在两个对象相互引用，导致无法回收，内存泄漏&lt;/p>
&lt;h4 id="根可达算法">根可达算法&lt;/h4>
&lt;p>维护引用的链表； 如果某个对象无法到达根节点，说明可以被回收&lt;/p>
&lt;h3 id="垃圾回收算法">垃圾回收算法&lt;/h3>
&lt;blockquote>
&lt;p>对&lt;code>停顿时间(延时)&lt;/code>和&lt;code>吞吐量&lt;/code>的权衡，没有最好，只有最适合当前业务场景的回收方式&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>针对 堆内存回收；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法区&lt;/p>
&lt;ul>
&lt;li>java 8 前 永久区（也参与垃圾回收，一样的算法，省事了，但是有默认最大内存限制，容易oom）&lt;/li>
&lt;li>java 8 彻底抛弃了 永久区，叫元数据区，使用本地内存&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="分代收集理论">分代收集理论&lt;/h4>
&lt;p>新生代&lt;/p>
&lt;p>老年代&lt;/p>
&lt;p>跨代引用： Remember set&lt;/p>
&lt;h4 id="标记清除">标记清除&lt;/h4>
&lt;p>产生内存碎片，内存分配复杂了。 可能需要类似硬盘的 “分区空闲分配链表” 等复杂方式解决&lt;/p>
&lt;p>Cms搜集器在old 区回收时采用， 但是内存碎片达到一定量，会采取一次标记整理。（和稀泥的做法，结合两者，）&lt;/p>
&lt;h4 id="标记复制">标记复制&lt;/h4>
&lt;p>一般用于新生代回收: Serial ParNew 的新生代采用该算法&lt;/p>
&lt;p>scurvivorRadio Ēden survivor survivor 8:1:1&lt;/p>
&lt;p>对象存活率较高时，需要更多的复制操作，效率会降低&lt;/p>
&lt;h4 id="标记整理">标记整理&lt;/h4>
&lt;p>用于old区：&lt;/p>
&lt;p>相对于 标记清除， 标记后，需要移动：将存活的对象移动到内存区域的一端。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>移动：增大的延迟，stw时间长些，但解决了内存碎片，内存分配复杂的问题，可以提高吞吐量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不移动：降低了延迟，但内存碎片，内存分配复杂， 吞吐量有所下降。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="垃圾回收器">垃圾回收器&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>对于新生代一般时使用标记复制算法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于老年代一般使用标记整理算法 （CMS除外）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210916161350325.png" alt="image-20210916161350325" />&lt;/p>
&lt;h4 id="serial收集器">Serial收集器&lt;/h4>
&lt;ul>
&lt;li>串行&lt;/li>
&lt;/ul>
&lt;h4 id="parnew收集器">ParNew收集器&lt;/h4>
&lt;ul>
&lt;li>并行&lt;/li>
&lt;/ul>
&lt;h4 id="parallel-scavenge收集器">Parallel Scavenge收集器&lt;/h4>
&lt;p>-XX:+UseParallelGC
-XX:+UseParallelOldGC&lt;/p>
&lt;ul>
&lt;li>
&lt;p>调整方式&lt;/p>
&lt;blockquote>
&lt;p>1.手动调整
-Xmn
-Xms
-XX:NewRatio=N
手动指定堆内存大小和代空间比例，一般要多次试验
2.自动参数调整
-XX:MaxGCPauseMillis=N 可接受最大停顿时间
-XX:GCTimeRatio=N 可接受GC时间占比（目标吞吐量） 吞吐量=1-1/(1+N)&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>并行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尽可能可以控制吞吐量 也叫 吞吐量优先收集器&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>-XX:+UseAdaptiveSizePolicy 默认开启的&lt;/p>
&lt;h4 id="serial-old收集器">Serial Old收集器&lt;/h4>
&lt;p>用于old区：串行&lt;/p>
&lt;h4 id="parallel-old收集器">Parallel Old收集器&lt;/h4>
&lt;p>用于old区：并行&lt;/p>
&lt;h4 id="cms收集器">CMS收集器&lt;/h4>
&lt;p>-XX:+UseParNewGC
-XX:+UseConcMarkSweepGC&lt;/p>
&lt;ul>
&lt;li>
&lt;p>尽可能缩短垃圾回收时，用户线程的停顿时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>和ParNew收集器配合：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="garbage-first-g1收集器">Garbage First (G1)收集器&lt;/h4>
&lt;h3 id="内存分配与回收策略">内存分配与回收策略&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>对象优先在Edem区分配&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大对象直接进入老年代&lt;/p>
&lt;/li>
&lt;li>
&lt;p>长期存活的对象进入老年代&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>每个对象有个&lt;code>年龄计数器&lt;/code> MinorGC一次，加1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>-XX:MaxTenuringThreshold=X X默认是15， 15次后进入老年代&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>动态对象年龄判断&lt;/p>
&lt;p>-XX:TargetSurvivorRatio 目标存活率，默认为50%&lt;/p>
&lt;p>survivor中相同年龄的对象大小之和大于TargetSurvivorRatio后，大于等于该年龄的都晋升到老年代。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>空间分配担保&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="相关应用">相关应用&lt;/h3>
&lt;h4 id="查看当前java版本使用的gc">查看当前java版本使用的GC&lt;/h4>
&lt;p>&lt;code>java -XX:+PrintCommandLineFlags -version&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>root@sd01 ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># java -XX:+PrintCommandLineFlags -version&lt;/span>
-XX:InitialHeapSize&lt;span class="o">=&lt;/span>&lt;span class="m">128167296&lt;/span> -XX:MaxHeapSize&lt;span class="o">=&lt;/span>&lt;span class="m">2050676736&lt;/span> -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC
java version &lt;span class="s2">&amp;#34;1.8.0_131&amp;#34;&lt;/span>
Java&lt;span class="o">(&lt;/span>TM&lt;span class="o">)&lt;/span> SE Runtime Environment &lt;span class="o">(&lt;/span>build 1.8.0_131-b11&lt;span class="o">)&lt;/span>
Java HotSpot&lt;span class="o">(&lt;/span>TM&lt;span class="o">)&lt;/span> 64-Bit Server VM &lt;span class="o">(&lt;/span>build 25.131-b11, mixed mode&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/519126-20180623154635076-953076776.png" alt="img" />&lt;/p>
&lt;blockquote>
&lt;p>UseParallelGC 按道理时使用 Parallel Scavenge + SerialOld，但后来P araller old出现后，&lt;strong>实际默认时用的&lt;code>Parallel Scavenge + Parallel Old&lt;/code>&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h3 id="heading">&lt;/h3>
&lt;h4 id="默认堆大小">默认堆大小&lt;/h4>
&lt;p>什么是jdk1.8默认堆大小？ （MaxHeapSize）&lt;/p>
&lt;p>就是使用java -jar 并且没有手动指定-Xmx参数的启动的进程使用的堆的大小，就是用的默认jdk堆的大小。&lt;/p>
&lt;p>这个默认的堆大小是取决你服务器的物理内存，假如服务器内存大于1GB，则使用1/4的服务器物理内存作为jvm的堆内存大小。&lt;/p>
&lt;p>eg：服务器内存4GB 则默认堆大小为1GB&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">java -XX:+PrintFlagsInitial
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="配置试例">&lt;strong>配置试例&lt;/strong>&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell"> java -Xms1600m -Xmx1600m -Xmn800m -Xloggc:/xxx/logs/xxx_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles&lt;span class="o">=&lt;/span>&lt;span class="m">20&lt;/span> -XX:GCLogFileSize&lt;span class="o">=&lt;/span>100M -Dprofile&lt;span class="o">=&lt;/span>prod -jar /xxx/xxx-1.0.0-SNAPSHOT.jar
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>-Xms: //堆内存初始化大小
-Xmx: //堆最大可用内存
-Xmn: //新生代堆最大可用内存
-XX:UseParallelGC //使用gc的类型&lt;/p>
&lt;p>-XX:SurvivorRadio//设置新生代中：Eden空间、SurvivorRadio From空间、SurvivorRadio To空间的占比
-XX:NewRatio //设置新生代空间和老年代空间的占比
-XX:+PrintGC //每次触发GC的时候打印相关日志
-XX:+PrintGCDetails //打印详细Gc日志&lt;/p>
&lt;p>-XX:+UseGCLogFileRotation&lt;/p>
&lt;p>-XX:NumberOfGCLogFiles&lt;/p>
&lt;p>-XX:GCLogFileSize&lt;/p>
&lt;/blockquote></description></item><item><title>pulsar</title><link>https://fengzhenbing.github.io/p/pulsar/</link><pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/pulsar/</guid><description>&lt;h2 id="相关概念">相关概念&lt;/h2>
&lt;ul>
&lt;li>计算存储分离&lt;/li>
&lt;li>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210406220312072.png" alt="image-20210406220312072" />&lt;/li>
&lt;/ul>
&lt;h2 id="安装测试">安装测试&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 下载&lt;/span>
wget https://mirrors.bfsu.edu.cn/apache/pulsar/pulsar-2.7.1/apache-pulsar-2.7.1-bin.tar.gz
tar xvfz apache-pulsar-2.7.1-bin.tar.gz
&lt;span class="nb">cd&lt;/span> apache-pulsar-2.7.1
&lt;span class="c1"># 单机启动&lt;/span>
bin/pulsar standalone
&lt;span class="c1"># 消费消息&lt;/span>
bin/pulsar-client consume my-topic -s &lt;span class="s2">&amp;#34;first-subscription&amp;#34;&lt;/span>
&lt;span class="c1"># 生产消息&lt;/span>
bin/pulsar-client produce my-topic --messages &lt;span class="s2">&amp;#34;hello-pulsar&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="相关资料">相关资料&lt;/h2>
&lt;p>&lt;a class="link" href="http://pulsar.apache.org/docs/zh-CN/standalone/" target="_blank" rel="noopener"
>官网快速启动&lt;/a>&lt;/p></description></item><item><title>rocketMQ</title><link>https://fengzhenbing.github.io/p/rocketmq/</link><pubDate>Sat, 20 Feb 2021 09:16:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/rocketmq/</guid><description>&lt;h2 id="相关概念">相关概念&lt;/h2>
&lt;p>二代mq, 纯java开发，和kafka无本质区别&lt;/p>
&lt;h2 id="安装测试">安装测试&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 下载 4.8.0&lt;/span>
wget https://downloads.apache.org/rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip
unzip rocketmq-all-4.8.0-bin-release.zip
&lt;span class="c1">#运行命名服务， 替代kafka的zk&lt;/span>
nohup sh bin/mqnamesrv &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="c1">#查看日志&lt;/span>
tail -f ~/logs/rocketmqlogs/namesrv.log
&lt;span class="c1">#运行broker&lt;/span>
nohup sh bin/mqbroker -n localhost:9876 &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="c1">#查看日志&lt;/span>
tail -f ~/logs/rocketmqlogs/broker.log
&lt;span class="c1"># 发送消息&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">NAMESRV_ADDR&lt;/span>&lt;span class="o">=&lt;/span>localhost:9876
sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
&lt;span class="c1">#消费消息&lt;/span>
sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="相关资料">相关资料&lt;/h2>
&lt;p>&lt;a class="link" href="http://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noopener"
>官网快速开始&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/apache/rocketmq/tree/master/docs/cn" target="_blank" rel="noopener"
>中文文档&lt;/a>&lt;/p></description></item><item><title>rabbitMQ</title><link>https://fengzhenbing.github.io/p/rabbitmq/</link><pubDate>Fri, 19 Feb 2021 10:16:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/rabbitmq/</guid><description>&lt;h3 id="rabbitmq相关概念">Rabbitmq相关概念&lt;/h3>
&lt;p>一代mq，erlang开发， 改进activemq&lt;/p>
&lt;ul>
&lt;li>Publisher 消息生产者, 返送消息时指定exchange 和routing key, 即可以将消息路由到匹配的queue中&lt;/li>
&lt;li>Routing key&lt;/li>
&lt;li>Binding 通过routing key 将queue和exchange绑定&lt;/li>
&lt;li>Exchange 工具人。。交易所。。代理
&lt;ul>
&lt;li>FanoutExchange: 将消息分发到所有的绑定队列，无routingkey的概念，发送时不指定routing key&lt;/li>
&lt;li>HeadersExchange ：通过添加属性key-value匹配&lt;/li>
&lt;li>DirectExchange: 按照routingkey分发到指定队列&lt;/li>
&lt;li>TopicExchange:多关键字匹配 正则&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Consumer&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://fengzhenbing.github.io/images/blog/image-20210405203826959.png" alt="image-20210405203826959" />&lt;/p>
&lt;p>&lt;strong>1. Exchange概念&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Exchange：接收消息，并根据路由键转发消息所绑定的队列。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/1577453-20200519174721973-114601627.png" alt="img" />&lt;/p>
&lt;p>蓝色框：客户端发送消息至交换机，通过路由键路由至指定的队列。
黄色框：交换机和队列通过路由键有一个绑定的关系。
绿色框：消费端通过监听队列来接收消息。&lt;/p>
&lt;h3 id="docker方式安装运行">Docker方式安装运行&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker pull rabbitmq:management
docker run -itd --name rabbitmq-test -e &lt;span class="nv">RABBITMQ_DEFAULT_USER&lt;/span>&lt;span class="o">=&lt;/span>admin -e &lt;span class="nv">RABBITMQ_DEFAULT_PASS&lt;/span>&lt;span class="o">=&lt;/span>admin -p 15672:15672 -p 5672:5672 rabbitmq:management
docker &lt;span class="nb">exec&lt;/span> -it rabbitmq-test /bin/bash
&lt;/code>&lt;/pre>&lt;/div>&lt;p>高可用&lt;/p>
&lt;h4 id="镜像集群模式高可用性">镜像集群模式（高可用性）&lt;/h4>
&lt;p>这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会&lt;strong>存在于多个实例上&lt;/strong>，就是说，每个 RabbitMQ 节点都有这个 queue 的一个&lt;strong>完整镜像&lt;/strong>，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把&lt;strong>消息同步&lt;/strong>到多个实例的 queue 上。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/mq-8.png" alt="mq-8" />&lt;/p>
&lt;p>那么&lt;strong>如何开启这个镜像集群模式&lt;/strong>呢？其实很简单，RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是&lt;strong>镜像集群模式的策略&lt;/strong>，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。&lt;/p>
&lt;p>这样的话，好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！第二，这么玩儿，不是分布式的，就&lt;strong>没有扩展性可言&lt;/strong>了，如果某个 queue 负载很重，你加机器，新增的机器也包含了这个 queue 的所有数据，并&lt;strong>没有办法线性扩展&lt;/strong>你的 queue。你想，如果这个 queue 的数据量很大，大到这个机器上的容量无法容纳了，此时该怎么办呢？&lt;/p></description></item><item><title>康威定律</title><link>https://fengzhenbing.github.io/p/%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B/</link><pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B/</guid><description>&lt;h2 id="康威定律组织决定产品形态">康威定律：组织决定产品形态&lt;/h2>
&lt;h3 id="第一定律">第一定律&lt;/h3>
&lt;p>&lt;strong>组织设计的产品/设计等价于这个组织的沟通结构。&lt;/strong>&lt;/p>
&lt;h3 id="第二定律">第二定律&lt;/h3>
&lt;p>时间再多一件事情也不可能做的完美，但总有时间做完一件事情&lt;/p>
&lt;h3 id="第三定律">第三定律&lt;/h3>
&lt;p>线型系统和线型组织架构间有潜在的异质同态特性&lt;/p>
&lt;h3 id="第四定律">第四定律&lt;/h3>
&lt;p>大的系统组织总是比小系统更倾向于分解&lt;/p></description></item><item><title>Synchronized锁</title><link>https://fengzhenbing.github.io/p/synchronized%E9%94%81/</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/synchronized%E9%94%81/</guid><description>&lt;h2 id="synchronized">Synchronized&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Object.wait()&lt;/strong>：释放当前对象锁，并进入阻塞队列(wait set)&lt;/li>
&lt;li>&lt;strong>Object.notify()&lt;/strong>：唤醒当前对象阻塞队列(wait set)里的任一线程（并不保证唤醒哪一个）&lt;/li>
&lt;li>&lt;strong>Object.notifyAll()&lt;/strong>：唤醒当前对象阻塞队列(wait set)里的所有线程, 进到entry set 去竞争锁&lt;/li>
&lt;/ul>
&lt;h2 id="为什么waitnotify和notifyall要与synchronized一起使用">为什么wait,notify和notifyAll要与synchronized一起使用？&lt;/h2>
&lt;p>Wait 只有通过synchronized拿到锁，才能进入wait set&lt;/p>
&lt;p>notify notifyAll只有通过synchronized拿到锁，才能去唤醒 wait set 里线程 到entry set&lt;/p>
&lt;h2 id="object-monitor">object monitor&lt;/h2>
&lt;p>&lt;img src="https://img-blog.csdnimg.cn/2019031712391984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211bGluc2VuNzc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" />&lt;/p>
&lt;h2 id="对象在内存中的存储">对象在内存中的存储&lt;/h2>
&lt;p>&lt;img src="https://img-blog.csdnimg.cn/2019012010560977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211bGluc2VuNzc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" />&lt;/p>
&lt;p>Markword 32位jvm 结构如下： 重量级锁即为 Synchronized 的锁&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20210418232331824.png" alt="image-20210418232331824" />&lt;/p>
&lt;h2 id="锁升级">锁升级&lt;/h2>
&lt;p>参考 &lt;a href="https://mp.weixin.qq.com/s/2yxexZUr5MWdMZ02GCSwdA">https://mp.weixin.qq.com/s/2yxexZUr5MWdMZ02GCSwdA&lt;/a>&lt;/p></description></item><item><title>hazelcast</title><link>https://fengzhenbing.github.io/p/hazelcast/</link><pubDate>Mon, 14 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/hazelcast/</guid><description>&lt;h2 id="安装">安装&lt;/h2>
&lt;h3 id="docker">docker&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker pull hazelcast/hazelcast
docker run -e &lt;span class="nv">HZ_NETWORK_PUBLICADDRESS&lt;/span>&lt;span class="o">=&lt;/span>192.168.3.14:5701 -p 5701:5701 hazelcast/hazelcast:&lt;span class="nv">$HAZELCAST_VERSION&lt;/span>
docker run -e &lt;span class="nv">HZ_NETWORK_PUBLICADDRESS&lt;/span>&lt;span class="o">=&lt;/span>192.168.3.14:5702 -p 5702:5701 hazelcast/hazelcast:&lt;span class="nv">$HAZELCAST_VERSION&lt;/span>
docker run -p 8080:8080 hazelcast/management-center
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>redis应用场景</title><link>https://fengzhenbing.github.io/p/redis%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</link><pubDate>Sun, 13 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/redis%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</guid><description>&lt;h2 id="一业务数据缓存">一.业务数据缓存*&lt;/h2>
&lt;p>经典用法。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>通用数据缓存，string，int，list，map等。&lt;/p>
&lt;ul>
&lt;li>验证码等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>实时热数据，最新500条数据。&lt;/p>
&lt;ul>
&lt;li>如热搜新闻。。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>会话缓存，token缓存等。&lt;/p>
&lt;ul>
&lt;li>spring-session-data-redis sesion共享&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="二业务数据处理">二.业务数据处理&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>非严格一致性要求的数据&lt;/p>
&lt;ul>
&lt;li>
&lt;p>评论，点击，点赞等。&lt;/p>
&lt;pre>&lt;code>set key 0
incr key // incr readcount::{帖子id} 每阅读一次
get key // get readcount::{帖子id} 获取阅读量
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>业务数据去重&lt;/p>
&lt;ul>
&lt;li>订单处理的幂等校验等。 如订单id放到redis 的set中去重复， bitmap 等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>业务数据排序&lt;/p>
&lt;ul>
&lt;li>排名，排行榜等。 使用sortedset&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="三全局一致计数-">三.全局一致计数 *&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>全局流控计数&lt;/p>
&lt;p>多个服务节点使用同一个redis的计数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>秒杀的库存计算&lt;/p>
&lt;p>和全局计数类似&lt;/p>
&lt;/li>
&lt;li>
&lt;p>抢红包&lt;/p>
&lt;p>和全局计数类似&lt;/p>
&lt;/li>
&lt;li>
&lt;p>全局ID生成&lt;/p>
&lt;p>例如：userId, 直接获取一段userId的最大值，缓存到本地服务慢慢累加，快到了userId的最大值时，再去获取一段，一个用户服务宕机了，也就一小段userId没有用到。 用数据库也可以。&lt;/p>
&lt;pre>&lt;code>set userId 0
incr usrId //返回1
incrby userId 1000 //返回10001
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="四高效统计计数">四.高效统计计数&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>id去重，记录访问ip等&lt;/p>
&lt;p>全局bitmap操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>UV、PV等访问量==&amp;gt;非严格一致性要求&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="五发布订阅与stream">五.发布订阅与Stream&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Pub-Sub 模拟队列&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; subscribe fzb
Reading messages... (press Ctrl-C to quit)
1) &amp;quot;subscribe&amp;quot;
2) &amp;quot;fzb&amp;quot;
3) (integer) 1
1) &amp;quot;message&amp;quot;
2) &amp;quot;fzb&amp;quot;
3) &amp;quot;fff&amp;quot;
1) &amp;quot;message&amp;quot;
2) &amp;quot;fzb&amp;quot;
3) &amp;quot;ffff&amp;quot;
127.0.0.1:6379&amp;gt; publish fzb fff
(integer) 1
127.0.0.1:6379&amp;gt; publish fzb ffff
(integer) 1
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Redis Stream 是 Redis 5.0 版本新增加的数据结构。
Redis Stream 主要用于消息队列(MQ，Message Queue)。&lt;/p>
&lt;p>具体可以参考 &lt;a class="link" href="https://www.runoob.com/redis/redis-stream.html" target="_blank" rel="noopener"
>https://www.runoob.com/redis/redis-stream.html&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="六分布式锁">六.分布式锁*&lt;/h2>
&lt;p>1、获取锁&amp;ndash;单个原子性操作&lt;/p>
&lt;ul>
&lt;li>SET dlock my_random_value NX PX 30000&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; set myLock 1 NX PX 30000
OK
127.0.0.1:6379&amp;gt; set myLock 1 NX PX 30000
(nil)
&lt;/code>&lt;/pre>&lt;p>2、释放锁&amp;ndash;lua脚本-保证原子性+单线程，从而具有事务性 . =&amp;gt; 因为内存操作是单线程的&lt;/p>
&lt;pre>&lt;code>if redis.call(&amp;quot;get&amp;quot;,KEYS[1]) == ARGV[1] then
return redis.call(&amp;quot;del&amp;quot;,KEYS[1]) else
return 0 end
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>关键点:原子性、互斥、超时&lt;/li>
&lt;/ul>
&lt;p>更多细节：&lt;a class="link" href="https://www.cnblogs.com/yunlongaimeng/p/10266690.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/yunlongaimeng/p/10266690.html&lt;/a>&lt;/p></description></item><item><title>redis基础</title><link>https://fengzhenbing.github.io/p/redis%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 11 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/redis%E5%9F%BA%E7%A1%80/</guid><description>&lt;h3 id="redis线程">redis线程&lt;/h3>
&lt;p>redis做为一个进程，一直是多线程的。处理io和处理内存的是不同线程。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>io线程&lt;/p>
&lt;ul>
&lt;li>
&lt;p>redis6之前(2020.05)：io处理是单线程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>redis6：io处理多线程，采用nio模型 =&amp;gt; 主要的性能提升点&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>内存处理线程&lt;/p>
&lt;ul>
&lt;li>单线程 =&amp;gt;高性能核心，不用考虑线程调度&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="压测redis-benchmark">压测redis-benchmark&lt;/h2>
&lt;ul>
&lt;li>环境mac 4核8g&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">mokernetdeMac-mini:redis-6.0.9 mokernet$ ./bin/redis-benchmark -n &lt;span class="m">100000&lt;/span> -c &lt;span class="m">32&lt;/span> -t SET,GET,INCR,HSET,LPUSH,MSET -q
SET: 121065.38 requests per second
GET: 118764.84 requests per second
INCR: 117508.81 requests per second
LPUSH: 123001.23 requests per second
HSET: 123915.74 requests per second
MSET &lt;span class="o">(&lt;/span>&lt;span class="m">10&lt;/span> keys&lt;span class="o">)&lt;/span>: 96711.80 requests per second
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="redis的5种基本数据结构">redis的5种基本数据结构&lt;/h2>
&lt;p>&lt;a href="https://redis.io/commands">https://redis.io/commands&lt;/a>&lt;/p>
&lt;h3 id="1字符串string">1.字符串(string)&lt;/h3>
&lt;p>简单来说就是三种:int、string、byte[]&lt;/p>
&lt;p>Redis中字符串类型的value最多可以容纳的数据长度是512M&lt;/p>
&lt;pre>&lt;code>set/get/setnx/getset/del/exists/append incr/decr/incrby/decrby
&lt;/code>&lt;/pre>&lt;h3 id="2散列hash">2.散列(hash)&lt;/h3>
&lt;p>Redis中的Hash类型可以看成具有String key 和String value的map容器。&lt;/p>
&lt;pre>&lt;code>hset/hget/hmset/hmget/hgetall/hdel/hincrby hexists/hlen/hkeys/hvals
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>hmset 相对于hset可一次设置多个键值对&lt;/li>
&lt;li>hmget 相对于hget可一次获取多个键的值&lt;/li>
&lt;/ul>
&lt;h3 id="3列表list">3.列表(list)&lt;/h3>
&lt;p>java的LinkedList&lt;/p>
&lt;p>在Redis中，List类型是按照插入顺序排序的字符串链表。和数据结构中的普通链表 一 样，我们可以在其头部(Left)和尾部(Right)添加新的元素。在插入时，如果该键并不存 在，Redis将为该键创建一个新的链表。与此相反，如果链表中所有的元素均被移除， 那么该键也将会被从数据库中删除。&lt;/p>
&lt;pre>&lt;code>lpush/rpush/lrange/lpop/rpop
&lt;/code>&lt;/pre>&lt;h3 id="4集合set">4.集合(set)&lt;/h3>
&lt;p>java的set，不重复的list&lt;/p>
&lt;p>在redis中，可以将Set类型看作是没有排序的字符集合，和List类型一样，我们也可以 在该类型的数值上执行添加、删除和判断某一元素是否存在等操作。这些操作的时间复 杂度为O(1),即常量时间内完成依次操作。&lt;/p>
&lt;p>和List类型不同的是，Set集合中不允许出现重复的元素。&lt;/p>
&lt;pre>&lt;code>sadd/srem/smembers/sismember 类比java中set的add, remove, all, contains,
spop key [count] 随机返回集合中一个或多个 移除
SRANDMEMBER key [count] 返回集合中一个或多个随机数，不移除, 抽奖
sdiff/sinter/sunion 集合求差集，求交集，求并集
&lt;/code>&lt;/pre>&lt;h3 id="5有序集合sorted-set">5.有序集合(sorted set)&lt;/h3>
&lt;p>按权重排序&lt;/p>
&lt;p>sortedset在set基础上给每个元素加了个分数score。&lt;/p>
&lt;p>redis 正是通过分数来为集合的成员进行从小到大的排序。sortedset中分数是可以重复的。&lt;/p>
&lt;pre>&lt;code>zadd key score member score2 member2... : 将成员以及该成员的分数存放到sortedset中
zscore key member : 返回指定成员的分数
zcard key : 获取集合中成员数量
zrem key member [member...] : 移除集合中指定的成员，可以指定多个成员
zrange key start end [withscores] : 获取集合中脚注为start-end的成员，[withscores]参数表明返回的成员 包含其分数
zrevrange key start stop [withscores] : 按照分数从大到小的顺序返回索引从start到stop之间的所有元素 (包含两端的元素)
zremrangebyrank key start stop : 按照排名范围删除元素
&lt;/code>&lt;/pre>&lt;h2 id="redis高级数据结构">redis高级数据结构&lt;/h2>
&lt;h3 id="1bitmaps">1.Bitmaps&lt;/h3>
&lt;p>bitmaps不是一个真实的数据结构。而是String类型上的一组面向bit操作的集合。由于 strings是二进制安全的blob，并且它们的最大长度是512m，所以bitmaps能最大设置 2^32个不同的bit。&lt;/p>
&lt;pre>&lt;code>setbit/getbit/bitop/bitcount/bitpos
&lt;/code>&lt;/pre>&lt;p>可用作集中式的冥等去重 数据压缩在字节位上，极大的节约了空间&lt;/p>
&lt;h3 id="2hyperloglog">2.HyperLogLog&lt;/h3>
&lt;p>Redis 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。&lt;/p>
&lt;p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。&lt;/p>
&lt;p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。&lt;/p>
&lt;pre>&lt;code>pfadd 添加
pfcount 获得基数值
pfmerge 合并多个key
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">127.0.0.1:6379&amp;gt; pfadd pf1 &lt;span class="m">1&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">5&lt;/span>
&lt;span class="o">(&lt;/span>integer&lt;span class="o">)&lt;/span> &lt;span class="m">1&lt;/span>
127.0.0.1:6379&amp;gt; pfcount pf1
&lt;span class="o">(&lt;/span>integer&lt;span class="o">)&lt;/span> &lt;span class="m">4&lt;/span>
127.0.0.1:6379&amp;gt; pfadd pf2 &lt;span class="m">3&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">7&lt;/span>
&lt;span class="o">(&lt;/span>integer&lt;span class="o">)&lt;/span> &lt;span class="m">1&lt;/span>
127.0.0.1:6379&amp;gt; pfcount pf2
&lt;span class="o">(&lt;/span>integer&lt;span class="o">)&lt;/span> &lt;span class="m">5&lt;/span>
127.0.0.1:6379&amp;gt; pfmerge pf3 pf1 pf2
OK
127.0.0.1:6379&amp;gt; pfcount pf3
&lt;span class="o">(&lt;/span>integer&lt;span class="o">)&lt;/span> &lt;span class="m">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>应用场景说明：&lt;/p>
&lt;ul>
&lt;li>基数不大，数据量不大就用不上，会有点大材小用浪费空间&lt;/li>
&lt;li>有局限性，就是只能统计基数数量，而没办法去知道具体的内容是什么&lt;/li>
&lt;li>和bitmap相比，属于两种特定统计情况，简单来说，HyperLogLog 去重比 bitmap 方便很多&lt;/li>
&lt;li>一般可以bitmap和hyperloglog配合使用，bitmap标识哪些用户活跃，hyperloglog计数&lt;/li>
&lt;/ul>
&lt;p>一般使用：&lt;/p>
&lt;ul>
&lt;li>统计注册 IP 数&lt;/li>
&lt;li>统计每日访问 IP 数&lt;/li>
&lt;li>统计页面实时 UV 数&lt;/li>
&lt;li>统计在线用户数&lt;/li>
&lt;li>统计用户每天搜索不同词条的个数&lt;/li>
&lt;/ul>
&lt;h3 id="3geo">3.GEO&lt;/h3>
&lt;pre>&lt;code>geoadd/geohash/geopos/geodist/georadius/georadiusbymember
&lt;/code>&lt;/pre>&lt;p>Redis的GEO特性在 Redis3.2版本中推出，这个功能可以将用户给定的地理位置(经 度和纬度)信息储存起来，并对这些信息进行操作。&lt;/p>
&lt;h3 id="4redis-中的布隆过滤器">4.Redis 中的布隆过滤器&lt;/h3>
&lt;p>Redis v4.0 之后有了 &lt;a class="link" href="https://redis.io/modules" target="_blank" rel="noopener"
>Module&lt;/a>（模块/插件）,RedisBloom 作为 Redis 布隆过滤器的 Module，地址：https://github.com/RedisBloom/RedisBloom&lt;/p>
&lt;h2 id="redis-lua">Redis Lua&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>类比openrestry = nginx + lua jit&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类似于数据库的存储过程，mongodb的js脚本&lt;/p>
&lt;/li>
&lt;li>
&lt;p>redis内存操作的单线程 使得一段lua脚本之心具有：&lt;strong>原子性&lt;/strong>，操作不会被打断，保证了&lt;strong>事务&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>直接执行
eval &amp;ldquo;return&amp;rsquo;hello java'&amp;rdquo; 0
eval &amp;ldquo;redis.call(&amp;lsquo;set&amp;rsquo;,KEYS[1],ARGV[1])&amp;rdquo; 1 lua-key lua-value&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; eval &amp;quot;return'hello java'&amp;quot; 0
&amp;quot;hello java&amp;quot;
127.0.0.1:6379&amp;gt; eval &amp;quot;redis.call('set',KEYS[1],ARGV[1])&amp;quot; 1 ff zz
(nil)
127.0.0.1:6379&amp;gt; get ff
&amp;quot;zz&amp;quot;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>预编译
script load script脚本片段
返回一个SHA-1签名 shastring
evalsha shastring keynum [key1 key2 key3 &amp;hellip;] [param1 param2 param3 &amp;hellip;]&lt;/p>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; script load &amp;quot;redis.call('set',KEYS[1],ARGV[1])&amp;quot;
&amp;quot;7cfb4342127e7ab3d63ac05e0d3615fd50b45b06&amp;quot;
127.0.0.1:6379&amp;gt; evalsha 7cfb4342127e7ab3d63ac05e0d3615fd50b45b06 1 fff zzz
(nil)
127.0.0.1:6379&amp;gt; get fff
&amp;quot;zzz&amp;quot;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="redis-pipeline">redis pipeline&lt;/h2>
&lt;p>使用管道一次执行多个命令，多个命令的结果一起返回，减少每个命令来回建立链接，来回响应的时间。&lt;/p>
&lt;p>&lt;a href="https://redis.io/topics/pipelining">https://redis.io/topics/pipelining&lt;/a>&lt;/p>
&lt;h2 id="redis事务">redis事务&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>开启事务:multi&lt;/p>
&lt;/li>
&lt;li>
&lt;p>命令入队&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行事务:exec&lt;/p>
&lt;/li>
&lt;li>
&lt;p>撤销事务:discard&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Watch 监控事务： watch 一个key，发生变化则事务失败&lt;/p>
&lt;/li>
&lt;li>
&lt;p>unwatch 取消监听&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>127.0.0.1:6379&amp;gt; multi
OK
127.0.0.1:6379&amp;gt; set ff ff
QUEUED
127.0.0.1:6379&amp;gt; set fff fff
QUEUED
127.0.0.1:6379&amp;gt; exec
1) OK
2) OK
&lt;/code>&lt;/pre>&lt;h2 id="redis管道">redis管道&lt;/h2>
&lt;h2 id="redis备份恢复机制">redis备份恢复机制&lt;/h2>
&lt;h3 id="rdb方式">RDB方式&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>快照恢复，类似mysql的frm.等数据：备份当前瞬间 Redis 在内存中的数据记录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>save后在数据目录生成dump.rdb&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bgsave 异步执行备份&lt;/p>
&lt;p>&lt;img src="http://pics5.baidu.com/feed/1c950a7b02087bf43b4490d50ac25f2a11dfcf7e.jpeg?token=22f387ba78130c6115420059481b2393&amp;amp;s=EF48A15796784D8816E1D9EB03007024" alt="img" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>恢复：将备份文件 (dump.rdb) 移动到 redis 数据目录并启动服务即可&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>redis.conf中&lt;/p>
&lt;pre>&lt;code>#Redis默认配置文件中提供了三个备份条件： ##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合
save 900 1
save 300 10
save 60 10000
&lt;/code>&lt;/pre>&lt;h3 id="aof方式">AOF方式&lt;/h3>
&lt;ul>
&lt;li>追加文件（Append-Only File，AOF） 类比mysql的binlog&lt;/li>
&lt;li>配置为 always，其含义为当 Redis 执行 命令的时候，则同时同步到 AOF 文件，这样会使得 Redis 同步刷新 AOF 文件，造成 缓慢。而采用 evarysec 则代表每秒同步一次命令到 AOF 文件&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>appendfilename &amp;quot;appendonly.aof&amp;quot;
# appendfsync always
appendfsync everysec
# appendfsync no......
&lt;/code>&lt;/pre>&lt;p>&lt;img src="http://pics5.baidu.com/feed/b17eca8065380cd7df69859ba056a5325982816c.jpeg?token=a060f459d81c409c3d6c7208d2118888&amp;amp;s=AF4AA5574ED85CC841D04BE60300A036" alt="img" />&lt;/p>
&lt;ul>
&lt;li>恢复：自动加载&lt;/li>
&lt;/ul>
&lt;h2 id="redis性能优化">redis性能优化&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">slowlog get &lt;span class="m">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="几个缓存问题">几个缓存问题&lt;/h2>
&lt;h3 id="缓存穿透">缓存穿透&lt;/h3>
&lt;ul>
&lt;li>现象：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库&lt;/li>
&lt;li>解决：
&lt;ul>
&lt;li>采用布隆过滤器：将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力，详见https://www.cnblogs.com/rinack/p/9712477.html&lt;/li>
&lt;li>直接缓存空结果：如果一个查询返回的数据为空，仍然把这个空结果进行缓存。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="缓存击穿">缓存击穿&lt;/h3>
&lt;ul>
&lt;li>现象：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。&lt;/li>
&lt;li>解决：使用&lt;strong>互斥分布式锁&lt;/strong>进行从DB加载数据，其他的请求继续重试缓存。使用锁可能会死锁、线程池阻塞等问题，针对高热点key，最好是在并发量最小的时候，写定时器更新key的过期时间&lt;/li>
&lt;/ul>
&lt;h3 id="缓存雪崩">缓存雪崩&lt;/h3>
&lt;ul>
&lt;li>现象：当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key。&lt;/li>
&lt;li>解决：
&lt;ul>
&lt;li>最简单尽量将过期时间分散开来：可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，&lt;/li>
&lt;li>设置过期标志更新缓存:
&lt;ul>
&lt;li>1，新加一个缓存key的标记。缓存数据key的value时，同时缓存key_sign, key_sign的过期时间小于key的过期时间。&lt;/li>
&lt;li>2 在查询缓存时，先判断key_sign是否过期，a，如果过期，先直接返回value，再启用异步线程去更新key_sign以及加载db到key的value,重新设置两个的过期时间。b. 没有过期，直接返回value&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>01.gateway整体逻辑</title><link>https://fengzhenbing.github.io/p/01.gateway%E6%95%B4%E4%BD%93%E9%80%BB%E8%BE%91/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/01.gateway%E6%95%B4%E4%BD%93%E9%80%BB%E8%BE%91/</guid><description>&lt;h2 id="gateway整体逻辑">gateway整体逻辑&lt;/h2>
&lt;h3 id="1流程图">1.流程图&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image.png" alt="image" />&lt;/p>
&lt;h3 id="2几个关键的类">2.&lt;strong>几个关键的类&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>org.springframework.web.reactive.DispatcherHandler: 请求分发处理器；&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;ul>
&lt;li>Spring WebFlux 的访问入口；&lt;/li>
&lt;li>类似于spring mvc DispatcherServlet,可以类比spring mvc 接收到请求;&lt;/li>
&lt;li>DispatcherHandler匹配 HandlerMapping此处会匹配到scg的RoutePredicateHandlerMapping&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping：HandlerMapping的实现；&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>通过RouteLocator匹配 Route: getHandlerInternal方法调用lookupRoute()方法，通过routeLocator获取所有配置的route,通过里面的Predicate配置来遍历判断找出符合的Route&lt;/li>
&lt;li>getHandlerInternal中返回FilteringWebHandler&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>org.springframework.cloud.gateway.handler.FilteringWebHandler: WebHandler的实现；&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>FilteringWebHandler被RoutePredicateHandlerMapping返回后，在DispatcherHandler中被SimpleHandlerAdapter执行handle方法；&lt;/li>
&lt;li>责任链模式：获取Route的GatewayFilter数组，创建DefaultGatewayFilterChain的过滤链；链式调用GatewayFilter&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h3 id="3项目结构">3.项目结构&lt;/h3>
&lt;p>核心module为spring-cloud-gateway-server&lt;/p>
&lt;ul>
&lt;li>actuate: 实现springboot actuator的端点，暴露route filter predicate等信息&lt;/li>
&lt;li>config: 使用springboot的配置注解的各类配置类&lt;/li>
&lt;li>discover：通过注册中心获取路由Route的核心功能配置类及实现类&lt;/li>
&lt;li>event：实现ApplicationEvent的事件类，例如路由刷新事件RefreshRoutesEvent&lt;/li>
&lt;li>filter: 包含特定路由的GatewayFilterFactory，GatewayFiler以及全局的GlobalFilter&lt;/li>
&lt;li>handler: 包含匹配route的断言工厂AbstractRoutePredicateFactory的所有默认实现，以及核心类FilteringWebHandler及RoutePredicateHandlerMapping&lt;/li>
&lt;li>route：路由的定义类，及路由定位类CachingRouteLocator的所有实现，及路由定义定位类CompositeRouteDefinitionLocator的所有实现，路由存储接口RouteDefinitionRepository及其所有实现&lt;/li>
&lt;li>support：工具类；如HTTP协议处理，组件名处理，日期转换等&lt;/li>
&lt;/ul></description></item><item><title>02.reactor响应式编程学习</title><link>https://fengzhenbing.github.io/p/02.reactor%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/02.reactor%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</guid><description>&lt;h2 id="reactor-使用">reactor 使用&lt;/h2>
&lt;p>![image (1)](&lt;a href="https://gitee.com/fengzhenbing/picgo/raw/master/image">https://gitee.com/fengzhenbing/picgo/raw/master/image&lt;/a> (1).png)&lt;/p>
&lt;h4 id="webflux-模块的名称是-spring-webflux名称中的-flux-来源于-reactor-中的类-flux">Webflux 模块的名称是 spring-webflux，名称中的 Flux 来源于 Reactor 中的类 Flux。&lt;/h4>
&lt;p>Reactor 两个核心概念做一些澄清，一个是Mono，另一个是Flux&lt;/p>
&lt;ul>
&lt;li>Flux ：表示的是包含 0 到 N 个元素的异步序列。包含三个类型&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;ul>
&lt;li>正常的包含元素的消息&lt;/li>
&lt;li>序列结束的消息&lt;/li>
&lt;li>序列出错的消息&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>Mono： 表示的是包含 0 或者 1 个元素的异步序列。该序列中同样可以包含与 Flux 相同的三种类型的消息通知。
示例代码：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a href="https://github.com/fengzhenbing/spring-cloud-gateway-demo/blob/master/demo-gateway/src/main/java/org/fzb/demo/gateway/RectorController.java">https://github.com/fengzhenbing/spring-cloud-gateway-demo/blob/master/demo-gateway/src/main/java/org/fzb/demo/gateway/RectorController.java&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>03.scg NettyWebServer启动过程</title><link>https://fengzhenbing.github.io/p/03.scg-nettywebserver%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/03.scg-nettywebserver%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</guid><description>&lt;h2 id="scg-nettywebserver启动过程">scg NettyWebServer启动过程&lt;/h2>
&lt;p>spring cloud gateway(下面简称scg)依赖spring webflux, 而spring webflux依赖于reactor-netty,也就是scg启动过程中最终会启动netty做为服务器。
springboot中定义一下几种服务器：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/webserver.png" alt="webserver" />&lt;/p>
&lt;h3 id="1-启动reactivewebserverapplicationcontext">1 启动ReactiveWebServerApplicationContext&lt;/h3>
&lt;p>从springboot启动开始分析&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GatewayApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置webApplicationType的值：REACTIVE还是servlet的。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SpringApplication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ResourceLoader&lt;/span> &lt;span class="n">resourceLoader&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;...&lt;/span> &lt;span class="n">primarySources&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resourceLoader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">resourceLoader&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">primarySources&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;PrimarySources must not be null&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">primarySources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedHashSet&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">primarySources&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">webApplicationType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WebApplicationType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">deduceFromClasspath&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//fzb 通过类路径中类，推测web应用类型：REACTIVE还是servlet的。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">setInitializers&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">Collection&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">getSpringFactoriesInstances&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApplicationContextInitializer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">setListeners&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">Collection&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">getSpringFactoriesInstances&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApplicationListener&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mainApplicationClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">deduceMainApplicationClass&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再看deduceFromClasspath方法：判断DispatcherHandler存在还是DispatcherServlet存在&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">static&lt;/span> &lt;span class="n">WebApplicationType&lt;/span> &lt;span class="nf">deduceFromClasspath&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//fzb 判断DispatcherHandler存在还是DispatcherServlet存在
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ClassUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isPresent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WEBFLUX_INDICATOR_CLASS&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">ClassUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isPresent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WEBMVC_INDICATOR_CLASS&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">ClassUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isPresent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JERSEY_INDICATOR_CLASS&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">WebApplicationType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">REACTIVE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">className&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">SERVLET_INDICATOR_CLASSES&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">ClassUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isPresent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">className&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">WebApplicationType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">NONE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">WebApplicationType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SERVLET&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在此scg项目有DispatcherHandler类，所以是REACTIVE，响应式的。
下面接着创建相应的响应式容器&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">protected&lt;/span> &lt;span class="n">ConfigurableApplicationContext&lt;/span> &lt;span class="nf">createApplicationContext&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">contextClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applicationContextClass&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">contextClass&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">webApplicationType&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//fzb 根据webApplicationType类型创建不同的context容器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="n">SERVLET&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">contextClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DEFAULT_SERVLET_WEB_CONTEXT_CLASS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">REACTIVE&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">contextClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DEFAULT_REACTIVE_WEB_CONTEXT_CLASS&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//fzb scg创建的容器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">contextClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DEFAULT_CONTEXT_CLASS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ClassNotFoundException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="s">&amp;#34;Unable create a default ApplicationContext, please specify an ApplicationContextClass&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ConfigurableApplicationContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">BeanUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instantiateClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">contextClass&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>各类容器选择总结&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/context.png" alt="context" />&lt;/p>
&lt;h3 id="2--reactivewebserverapplicationcontext刷新">2 ReactiveWebServerApplicationContext刷新&lt;/h3>
&lt;p>先创建了
org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration中配置了EmbeddedNetty，初始化了NettyReactiveWebServerFactory&lt;/p>
&lt;p>ReactiveWebServerApplicationContext容器刷新时通过ReactiveWebServerFactory创建WebServerManager&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onRefresh&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">onRefresh&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">createWebServer&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//fzb 创建WebServerManager
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ApplicationContextException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Unable to start reactive web server&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">createWebServer&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//fzb 通过ReactiveWebServerFactory创建WebServerManager
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">WebServerManager&lt;/span> &lt;span class="n">serverManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverManager&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">serverManager&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">webServerFactoryBeanName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getWebServerFactoryBeanName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ReactiveWebServerFactory&lt;/span> &lt;span class="n">webServerFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getWebServerFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">webServerFactoryBeanName&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//fzb 获取EmbeddedNetty配置的ReactiveWebServerFactory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">lazyInit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getBeanFactory&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getBeanDefinition&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">webServerFactoryBeanName&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">isLazyInit&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">WebServerManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">webServerFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getHttpHandler&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lazyInit&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//fzb 创建
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">getBeanFactory&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">registerSingleton&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;webServerGracefulShutdown&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">WebServerGracefulShutdownLifecycle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverManager&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">getBeanFactory&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">registerSingleton&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;webServerStartStop&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">WebServerStartStopLifecycle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverManager&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">initPropertySources&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再看WebServerManager初始化时，再通过ReactiveWebServerFactory 初始化创建NettyWebServer&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">WebServerManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ReactiveWebServerApplicationContext&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ReactiveWebServerFactory&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Supplier&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HttpHandler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">handlerSupplier&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">lazyInit&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">applicationContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Assert&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Factory must not be null&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DelayedInitializationHttpHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">handlerSupplier&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lazyInit&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">webServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWebServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handler&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//fzb scg中创建NettyWebServer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是ReactiveWebServerFactory初始化创建NettyWebServer的过程，实际是创建reactor.netty 的HttpServer，通过适配器模式ReactorHttpHandlerAdapter，适配为NettyWebServer 返回&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="kd">public&lt;/span> &lt;span class="n">WebServer&lt;/span> &lt;span class="nf">getWebServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpHandler&lt;/span> &lt;span class="n">httpHandler&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">HttpServer&lt;/span> &lt;span class="n">httpServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createHttpServer&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//fzb 创建reactor.netty 的HttpServer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ReactorHttpHandlerAdapter&lt;/span> &lt;span class="n">handlerAdapter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ReactorHttpHandlerAdapter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">httpHandler&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//通过ReactorHttpHandlerAdapter适配器模式适配
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">NettyWebServer&lt;/span> &lt;span class="n">webServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NettyWebServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">httpServer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">handlerAdapter&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lifecycleTimeout&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">getShutdown&lt;/span>&lt;span class="o">());&lt;/span>&lt;span class="c1">//HttpServer 适配为NettyWebServer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">webServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setRouteProviders&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">routeProviders&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">webServer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3--netty的serverbootstrap启动">3 Netty的ServerBootstrap启动&lt;/h3>
&lt;p>继续跟进createHttpServer()&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">HttpServer&lt;/span> &lt;span class="nf">createHttpServer&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">HttpServer&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">HttpServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//fzb 创建httpServer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">....&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>跟进HttpServer.create()，如下为&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">HttpServer&lt;/span> &lt;span class="nf">create&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">HttpServerBind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看HttpServerBind初始化过程，实际最终创建的是TcpServer&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">TcpServer&lt;/span> &lt;span class="n">DEFAULT_TCP_SERVER&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TcpServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">// 创建TcpServer
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">HttpServerBind&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DEFAULT_TCP_SERVER&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再跟进TcpServer&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">TcpServer&lt;/span> &lt;span class="nf">create&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">TcpServerBind&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>千呼万唤始出来 TcpServerBind,&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">TcpServerBind&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverBootstrap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createServerBootstrap&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//创建启动Netty的服务端serverBootstrap
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BootstrapHandlers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channelOperationFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">serverBootstrap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TcpUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TCP_OPS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此找到了scg启动时最终启动的netty server.&lt;/p>
&lt;p>HttpServer为reactor netty项目中的
参考 Reactor Netty参考指南 &lt;a href="https://projectreactor.io/docs/netty/release/reference/index.html">https://projectreactor.io/docs/netty/release/reference/index.html&lt;/a>&lt;/p></description></item><item><title>04.scg 一次请求的执行过程</title><link>https://fengzhenbing.github.io/p/04.scg-%E4%B8%80%E6%AC%A1%E8%AF%B7%E6%B1%82%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/04.scg-%E4%B8%80%E6%AC%A1%E8%AF%B7%E6%B1%82%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</guid><description>&lt;h2 id="一次请求的执行过程">一次请求的执行过程&lt;/h2></description></item><item><title>05.route路由的配置加载</title><link>https://fengzhenbing.github.io/p/05.route%E8%B7%AF%E7%94%B1%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/05.route%E8%B7%AF%E7%94%B1%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD/</guid><description>&lt;h2 id="route路由的配置加载">route路由的配置加载&lt;/h2>
&lt;hr>
&lt;p>主要在sprng-cloud-gateway-server的route包定义路由相关的定义，构建和加载&lt;/p>
&lt;p>![路由](&lt;a href="https://gitee.com/fengzhenbing/picgo/raw/master/image">https://gitee.com/fengzhenbing/picgo/raw/master/image&lt;/a> (2).png)&lt;/p>
&lt;h3 id="0相关配置">0.相关配置&lt;/h3>
&lt;ul>
&lt;li>通过springboot spi方式，springboot会启动spring.factories中配置的
org.springframework.cloud.gateway.discovery.GatewayDiscoveryClientAutoConfiguration&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-properties" data-lang="properties">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.springframework.cloud.gateway.config.GatewayAutoConfiguration,\
org.springframework.cloud.gateway.discovery.GatewayDiscoveryClientAutoConfiguration,\
...
&lt;/code>&lt;/pre>&lt;h3 id="1路由定义">1.路由定义&lt;/h3>
&lt;ul>
&lt;li>路由定义RouteDefinition&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RouteDefinition&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@NotEmpty&lt;/span>
&lt;span class="nd">@Valid&lt;/span>&lt;span class="c1">//fzb 断言定义数组
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PredicateDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">predicates&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="nd">@Valid&lt;/span>&lt;span class="c1">//fzb 过滤器定义数组
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FilterDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filters&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="nd">@NotNull&lt;/span>&lt;span class="c1">//fzb 路由路径
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">URI&lt;/span> &lt;span class="n">uri&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>路由定义定位器&lt;/li>
&lt;/ul>
&lt;p>获取路由的定义，负责读取上述路由定义配置 RouteDefinition，最终会通过路由定义生成路由&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">RouteDefinitionLocator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//fzb 获取路由定义对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Flux&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RouteDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getRouteDefinitions&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>有以下实现：&lt;/p>
&lt;p>![image (3)](&lt;a href="https://gitee.com/fengzhenbing/picgo/raw/master/image">https://gitee.com/fengzhenbing/picgo/raw/master/image&lt;/a> (3).png)&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>CachingRouteDefinitionLocator: 它包装了CompositeRouteDefinitionLocator,缓存路由定义RouteDefinition列表&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>public class CachingRouteDefinitionLocator
implements RouteDefinitionLocator, ApplicationListener&lt;!-- raw HTML omitted --> {//fzb 事件监听RefreshRoutesEvent&lt;/p>
&lt;pre>&lt;code>private static final String CACHE_KEY = &amp;quot;routeDefs&amp;quot;;
private final RouteDefinitionLocator delegate;
//fzb 路由定义flux
private final Flux&amp;lt;RouteDefinition&amp;gt; routeDefinitions;
//fzb 内存缓存RouteDefinition
private final Map&amp;lt;String, List&amp;gt; cache = new ConcurrentHashMap&amp;lt;&amp;gt;();
...
//fzb 监听到路由刷新事件，重新获取路由并缓存到cache
@Override
public void onApplicationEvent(RefreshRoutesEvent event) {
fetch().materialize().collect(Collectors.toList())
.doOnNext(routes -&amp;gt; cache.put(CACHE_KEY, routes)).subscribe();
}
&lt;/code>&lt;/pre>
&lt;p>&amp;hellip;
}&lt;/p>
&lt;pre>&lt;code> &amp;gt; * CompositeRouteDefinitionLocator:
&amp;gt; 遍历执行所有RouteDefinitionLocator的查找路由定义方法,将找到的路由定义合并； 组合多种 RouteDefinitionLocator 的实现，为 routeDefinitions提供统一入口
​```java
public class CompositeRouteDefinitionLocator implements RouteDefinitionLocator {
...
//fzb 组合多个路由定义定位器RouteDefinitionLocator
private final Flux&amp;lt;RouteDefinitionLocator&amp;gt; delegates;
// fzb 路由定义的id 生成器，默认UUID
private final IdGenerator idGenerator;
...
public CompositeRouteDefinitionLocator(Flux&amp;lt;RouteDefinitionLocator&amp;gt; delegates,
IdGenerator idGenerator) {
this.delegates = delegates;
this.idGenerator = idGenerator;// 路由定义的id 生成器，默认UUID
}
@Override
public Flux&amp;lt;RouteDefinition&amp;gt; getRouteDefinitions() {
//遍历执行所有RouteDefinitionLocator的查找路由定义方法,将找到的路由定义合并
return this.delegates
.flatMapSequential(RouteDefinitionLocator::getRouteDefinitions)
.flatMap(routeDefinition -&amp;gt; {
if (routeDefinition.getId() == null) {
return randomId().map(id -&amp;gt; {
routeDefinition.setId(id);// 设置uuid
if (log.isDebugEnabled()) {
log.debug(
&amp;quot;Id set on route definition: &amp;quot; + routeDefinition);
}
return routeDefinition;
});
}
return Mono.just(routeDefinition);
});
}
...
}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;ul>
&lt;li>PropertiesRouteDefinitionLocator: 从配置文件(GatewayProperties 例如，YML / Properties 等 ) 读取RouteDefinition&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="c1">//fzb 从GatewayProperties读取路由定义
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Flux&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RouteDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getRouteDefinitions&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Flux&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">fromIterable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRoutes&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>DiscoveryClientRouteDefinitionLocator 从注册中心如：Netflix Eureka， Consul 或 Zookeeper读取RouteDefinition&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">DiscoveryClientRouteDefinitionLocator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ReactiveDiscoveryClient&lt;/span> &lt;span class="n">discoveryClient&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">DiscoveryLocatorProperties&lt;/span> &lt;span class="n">properties&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">discoveryClient&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSimpleName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">properties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//fzb 通过服务发现客户端 ，比如eureka客户端从注册中心拿到所有的服务实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">serviceInstances&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">discoveryClient&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getServices&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">flatMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">service&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">discoveryClient&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstances&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">collectList&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将服务实例serviceInstances转为路由定义&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Flux&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RouteDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getRouteDefinitions&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpelExpressionParser&lt;/span> &lt;span class="n">parser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SpelExpressionParser&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Expression&lt;/span> &lt;span class="n">includeExpr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">parseExpression&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getIncludeExpression&lt;/span>&lt;span class="o">());&lt;/span>&lt;span class="c1">//fzb 扩展点，可以通过properties 配置其他spel
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Expression&lt;/span> &lt;span class="n">urlExpr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parseExpression&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUrlExpression&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>RouteDefinitionRepository 从存储器(内存 / Redis / MySQL 等 )读取RouteDefinition，实现RouteDefinitionWriter接口；
提供删除和保存RouteDefinition的方法；
默认实现有：InMemoryRouteDefinitionRepository,没有RouteDefinitionRepository的实例，则默认用InMemoryRouteDefinitionRepository&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">InMemoryRouteDefinitionRepository&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">RouteDefinitionRepository&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RouteDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">routes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">synchronizedMap&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">LinkedHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RouteDefinition&lt;/span>&lt;span class="o">&amp;gt;());&lt;/span>&lt;span class="c1">//fzb 内存中用 同步map 存储
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@Override&lt;/span>&lt;span class="c1">// fzb 保存路由到内存中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Mono&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Void&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Mono&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RouteDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">route&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">route&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flatMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">StringUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">()))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Mono&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;id may not be empty&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">routes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//保存
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">Mono&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">empty&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>&lt;span class="c1">// fzb 从内存中删除路由
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Mono&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Void&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Mono&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">routeId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>&lt;span class="c1">// fzb 获取路由定义
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Flux&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RouteDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getRouteDefinitions&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Flux&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">fromIterable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">values&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>自定义路由存储器,redis存储：RedisRouteDefinitionRepository
&lt;a href="https://github.com/fengzhenbing/spring-cloud-gateway-demo/blob/master/demo-gateway/src/main/java/org/fzb/demo/gateway/route/RedisRouteDefinitionRepository.java">https://github.com/fengzhenbing/spring-cloud-gateway-demo/blob/master/demo-gateway/src/main/java/org/fzb/demo/gateway/route/RedisRouteDefinitionRepository.java&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="2路由">2.路由&lt;/h3>
&lt;ul>
&lt;li>路由Route&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Route&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Ordered&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//fzb 路由地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">URI&lt;/span> &lt;span class="n">uri&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//fzb 路由的优先级
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AsyncPredicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ServerWebExchange&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">predicate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//fzb gatewayFilter列表
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">GatewayFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">gatewayFilters&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//fzb 元数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">metadata&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>路由定位器 RouteLocator
获取路由对象&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">RouteLocator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//fzb 获取路由对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Flux&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Route&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getRoutes&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/routeLocator.png" alt="routeLocator" />&lt;/p>
&lt;p>类似RouteDefinitionLocator三个实现：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>缓存：CachingRouteLocator： 缓存路由，查找时使用CompositeRouteLocator去查找&lt;/li>
&lt;li>组合： CompositeRouteLocator：使用多个RouteLocator查找路由并合并&lt;/li>
&lt;li>单个的 RouteDefinitionRouteLocator：最终使用RouteDefinitionLocator查找路由定义并转为路由对象Route
单个路由的 filters = GlobalFilter + 默认GatewayFilter + 本路由配置的GatewayFilter&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RouteDefinitionRouteLocator&lt;/span>
&lt;span class="kd">implements&lt;/span> &lt;span class="n">RouteLocator&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BeanFactoryAware&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ApplicationEventPublisherAware&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">RouteDefinitionRouteLocator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RouteDefinitionLocator&lt;/span> &lt;span class="n">routeDefinitionLocator&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RoutePredicateFactory&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">predicates&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">GatewayFilterFactory&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">gatewayFilterFactories&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">GatewayProperties&lt;/span> &lt;span class="n">gatewayProperties&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">ConfigurationService&lt;/span> &lt;span class="n">configurationService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">routeDefinitionLocator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">routeDefinitionLocator&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//fzb //设置路由定义定位器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configurationService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">configurationService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">initFactories&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">predicates&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//fzb //初始化路由断言工厂
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">gatewayFilterFactories&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">factory&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">gatewayFilterFactories&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">));&lt;/span>&lt;span class="c1">//fzb //初始化网关过滤器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">gatewayProperties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gatewayProperties&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1">//fzb 获取路由对象： 先获取RouteDefinition，再转为 Route
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Flux&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Route&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getRoutes&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Flux&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Route&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">routes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">routeDefinitionLocator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRouteDefinitions&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">map&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">convertToRoute&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//fzb RouteDefinition转为 Route
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//fzb 路由定义转为 路由
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Route&lt;/span> &lt;span class="nf">convertToRoute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RouteDefinition&lt;/span> &lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//fzb 1,将本路由定义中各个断言 与运算 合并为一个 AsyncPredicate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">AsyncPredicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ServerWebExchange&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">predicate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">combinePredicates&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//fzb 2, 获取所有的默认的过滤器和本路由定义的过滤器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">GatewayFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">gatewayFilters&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getFilters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 组装Route
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">Route&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">async&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">asyncPredicate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">predicate&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">replaceFilters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">gatewayFilters&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//fzb 过滤器定义filterDefinitions加载为过滤器GatewayFilter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">GatewayFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">loadGatewayFilters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FilterDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filterDefinitions&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">GatewayFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ordered&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">filterDefinitions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">filterDefinitions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterDefinition&lt;/span> &lt;span class="n">definition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">filterDefinitions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">GatewayFilterFactory&lt;/span> &lt;span class="n">factory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">gatewayFilterFactories&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">definition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">factory&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="s">&amp;#34;Unable to find GatewayFilterFactory with name &amp;#34;&lt;/span>
&lt;span class="o">+&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDebugEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;RouteDefinition &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; applying filter &amp;#34;&lt;/span>
&lt;span class="o">+&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getArgs&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; to &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// @formatter:off
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">configuration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configurationService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">with&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">definition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">properties&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">definition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getArgs&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">eventFunction&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">bound&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">properties&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterArgsEvent&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="c1">// TODO: why explicit cast needed or java compile fails
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">RouteDefinitionRouteLocator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span> &lt;span class="n">properties&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">bind&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// @formatter:on
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// some filters require routeId
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: is there a better place to apply this?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">configuration&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">HasRouteId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">HasRouteId&lt;/span> &lt;span class="n">hasRouteId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">HasRouteId&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">hasRouteId&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setRouteId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">GatewayFilter&lt;/span> &lt;span class="n">gatewayFilter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configuration&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">gatewayFilter&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">Ordered&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ordered&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">gatewayFilter&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ordered&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">OrderedGatewayFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">gatewayFilter&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ordered&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">GatewayFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getFilters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RouteDefinition&lt;/span> &lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">GatewayFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filters&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="c1">//fzb 1,加上默认的过滤器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: support option to apply defaults after route specific filters?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">gatewayProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultFilters&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">filters&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">loadGatewayFilters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DEFAULT_FILTERS&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">gatewayProperties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultFilters&lt;/span>&lt;span class="o">())));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//fzb 2,加上本路由配置的过滤器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getFilters&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">filters&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">loadGatewayFilters&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getFilters&lt;/span>&lt;span class="o">())));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//fzb 排序 按实现的Ordered接口
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">AnnotationAwareOrderComparator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">filters&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">filters&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//fzb combinePredicates主要是对找出来的predicate进行and操作
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">AsyncPredicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ServerWebExchange&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">combinePredicates&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">RouteDefinition&lt;/span> &lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PredicateDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">predicates&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPredicates&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">predicates&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">predicates&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// this is a very rare case, but possible, just match all
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">AsyncPredicate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">from&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">exchange&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">AsyncPredicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ServerWebExchange&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">predicate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">predicates&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">PredicateDefinition&lt;/span> &lt;span class="n">andPredicate&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">predicates&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">subList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">predicates&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">AsyncPredicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ServerWebExchange&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">found&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">routeDefinition&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">andPredicate&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">predicate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">predicate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">and&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">found&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//fzb and 各个断言 与 合并为一个 AsyncPredicate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">predicate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="类比">类比&lt;/h3>
&lt;ul>
&lt;li>Route -&amp;gt; RouteDefinition -&amp;gt;RouteDefinitionLocator -&amp;gt; xxxRouteDefinitionRepository&lt;/li>
&lt;li>Bean -&amp;gt; BeanDefinition -&amp;gt; BeanDefinitionRegistry -&amp;gt; DefaultListableBeanFactory#Map&amp;lt;String, BeanDefinition&amp;gt; beanDefinitionMap = new ConcurrentHashMap&amp;lt;&amp;gt;(256);&lt;/li>
&lt;/ul></description></item><item><title>06.route通过注册中心自动配置加载</title><link>https://fengzhenbing.github.io/p/06.route%E9%80%9A%E8%BF%87%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/06.route%E9%80%9A%E8%BF%87%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD/</guid><description>&lt;h2 id="route通过注册中心eureka自动加载配置">route通过注册中心Eureka自动加载配置&lt;/h2>
&lt;h3 id="配置">配置&lt;/h3>
&lt;ul>
&lt;li>gateway及后端微服务引入注册中心客户端eureka-client&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!-- 引入 Spring Cloud Netflix Eureka Client 相关依赖，将 Eureka 作为注册中心的客户端，并实现对其的自动配置 --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-client&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>eureka-client starter的引入，会同时引入ribbon,作为后续请求，负载均衡的实现&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/eureka-ribbon.png" alt="eureka-ribbon" />&lt;/p>
&lt;p>spring.cloud.gateway.discovery.locator.enabled设为true,启用服务发现的DiscoveryClientRouteDefinitionLocator&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cloud&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Spring Cloud Gateway 配置项，对应 GatewayProperties 类&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">discovery&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">locator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># default fase，设为true开启&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">proxyBeanMethods&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@ConditionalOnProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;spring.cloud.discovery.reactive.enabled&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="c1">//fzb 默认使用响应式的方式
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">matchIfMissing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ReactiveDiscoveryClientRouteDefinitionLocatorConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>&lt;span class="c1">//fzb spring.cloud.gateway.discovery.locator.enabled配为true时，才开启DiscoveryClientRouteDefinitionLocator
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@ConditionalOnProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;spring.cloud.gateway.discovery.locator.enabled&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">DiscoveryClientRouteDefinitionLocator&lt;/span> &lt;span class="nf">discoveryClientRouteDefinitionLocator&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="n">ReactiveDiscoveryClient&lt;/span> &lt;span class="n">discoveryClient&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="c1">//响应式的客服端 Eureka就是 EurekaReactiveDiscoveryClient
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">DiscoveryLocatorProperties&lt;/span> &lt;span class="n">properties&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DiscoveryClientRouteDefinitionLocator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">discoveryClient&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">properties&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>eureka-client的引入，会开启TimedSupervisorTask执行HeartbeatThread的心跳任务， 默认每隔30s一次&lt;/li>
&lt;/ul>
&lt;p>RouteRefreshListener 每隔30s接收到HeartBeatEvent事件，同时会发送RefreshRoutes事件&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/rrf.png" alt="rrf" />&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/heartbeat.png" alt="heartbeat" />&lt;/p>
&lt;p>CachingRouteLocator 收到RefreshRoutesEvent事件，重新获取路由时会发现多了一个DiscoveryClientRouteDefinitionLocator （负责从注册中心获取新路由配置）&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/cacheroutelocator.png" alt="cacheroutelocator" />&lt;/p>
&lt;h3 id="验证">验证&lt;/h3>
&lt;p>http://localhost:7070/ORDER/order/get 前边ORDER为eureka-client从eureka-server获取的服务名，&lt;/p>
&lt;p>LoadBalancerClientFilter在NettyRoutingFilter之前通过ribbon执行负载均衡策略，选择一个服务实例&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/lbancerClient.png" alt="lbancerClient" />&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;ul>
&lt;li>springgateway 接收注册中心心跳事件，发送路由刷新事件，&lt;/li>
&lt;li>CachingRouteLocator 最终调用DiscoveryClientRouteDefinitionLocator#getRouteDefinitions 获取注册中心最新的路由&lt;/li>
&lt;/ul>
&lt;p>代码实现:https://github.com/fengzhenbing/spring-cloud-gateway-demo.git&lt;/p></description></item><item><title>07.precidate的对路由进行选择</title><link>https://fengzhenbing.github.io/p/07.precidate%E7%9A%84%E5%AF%B9%E8%B7%AF%E7%94%B1%E8%BF%9B%E8%A1%8C%E9%80%89%E6%8B%A9/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/07.precidate%E7%9A%84%E5%AF%B9%E8%B7%AF%E7%94%B1%E8%BF%9B%E8%A1%8C%E9%80%89%E6%8B%A9/</guid><description>&lt;h1 id="precidate选择路由">precidate选择路由&lt;/h1></description></item><item><title>08.filter的配置加载及合并</title><link>https://fengzhenbing.github.io/p/08.filter%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%90%88%E5%B9%B6/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/08.filter%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%90%88%E5%B9%B6/</guid><description/></item><item><title>soul整体结构</title><link>https://fengzhenbing.github.io/p/soul%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/soul%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84/</guid><description>&lt;h3 id="shenyu介绍">ShenYu介绍&lt;/h3>
&lt;p>&lt;a class="link" href="https://dromara.org/zh/" target="_blank" rel="noopener"
>官网&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://dromara.org/img/architecture/soul-framework.png" alt="img" />&lt;/p>
&lt;ul>
&lt;li>高性能，多协议，易扩展，响应式的API Gateway&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>丰富的协议&lt;/th>
&lt;th>支持 dubbo ，tars， springcloud grpc。&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>插件化&lt;/td>
&lt;td>插件化设计思想，插件热插拔，易扩展。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>流控&lt;/td>
&lt;td>灵活的流量筛选，能满足各种流量控制。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>内置插件&lt;/td>
&lt;td>内置丰富的插件支持，鉴权，限流，熔断，防火墙等。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>高性能&lt;/td>
&lt;td>流量配置动态化，性能极高，网关消耗在 1~2ms。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>集群部署&lt;/td>
&lt;td>支持集群部署，支持 A/B Test，蓝绿发布。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="soul项目结构">soul项目结构&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>soul-admin&lt;/p>
&lt;p>soul网关管理端，配合soul-dashbord&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-bootstrap&lt;/p>
&lt;p>网关启动工程： 实际引入soul-spring-boot-starter-gateway(soul-web)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-client&lt;/p>
&lt;p>为下游服务提供者提供各类服务接入网关soul的客户端&lt;/p>
&lt;ul>
&lt;li>Soul-client-common&lt;/li>
&lt;li>Soul-client-dubbo&lt;/li>
&lt;li>Soul-client-grpc&lt;/li>
&lt;li>Soul-client-http&lt;/li>
&lt;li>Soul-client-sofa&lt;/li>
&lt;li>Soul-client-tars&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Soul-common&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-dashbord&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-dist&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-example&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-metrics&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-plugin&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-register-center&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-spi&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-spring-boot-starter&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Soul-sync-data-center&lt;/p>
&lt;ul>
&lt;li>Soul-sync-data-api&lt;/li>
&lt;li>Soul-sync-data-http&lt;/li>
&lt;li>Soul-sync-data-nacos&lt;/li>
&lt;li>Soul-sync-data-websocket&lt;/li>
&lt;li>Soul-sync-data-zookeeper&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Soul-web&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>安装redis</title><link>https://fengzhenbing.github.io/p/%E5%AE%89%E8%A3%85redis/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/%E5%AE%89%E8%A3%85redis/</guid><description>&lt;h2 id="下载">下载&lt;/h2>
&lt;p>&lt;a href="https://redis.io/download">https://redis.io/download&lt;/a>&lt;/p>
&lt;h2 id="编译">编译&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">wget https://download.redis.io/releases/redis-6.0.10.tar.gz
tar xzf redis-6.0.10.tar.gz
&lt;span class="nb">cd&lt;/span> redis-6.0.10
sudo make
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行">运行&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#复制配置文件及命令&lt;/span>
mkdir ./bin
mkdir ./conf
sudo cp ./src/mkreleasehdr.sh ./bin
sudo cp ./src/redis-benchmark ./bin
sudo cp ./src/redis-check-rdb ./bin
sudo cp ./src/redis-cli ./bin
sudo cp ./src/redis-server ./bin
sudo cp ./redis.conf ./conf
&lt;span class="c1">#运行&lt;/span>
./bin/redis-server ./conf/redis.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置">配置&lt;/h2>
&lt;p>redis.conf&lt;/p>
&lt;pre>&lt;code>#修改为守护模式
daemonize yes
#设置进程锁文件
pidfile /usr/local/redis-4.0.11/redis.pid
#端口
port 6379
#客户端超时时间
timeout 300
#日志级别
loglevel debug
#日志文件位置
logfile /usr/local/redis-4.0.11/log-redis.log
#设置数据库的数量，默认数据库为0，可以使用SELECT &amp;lt;dbid&amp;gt;命令在连接上指定数据库id
databases 16
##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合
#save &amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt;
#Redis默认配置文件中提供了三个条件：
save 900 1
save 300 10
save 60 10000
#指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，
#可以关闭该#选项，但会导致数据库文件变的巨大
rdbcompression yes
#指定本地数据库文件名
dbfilename dump.rdb
#指定本地数据库路径
dir /usr/local/redis-4.0.11/db/
#指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能
#会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有
#的数据会在一段时间内只存在于内存中
appendonly no
#指定更新日志条件，共有3个可选值：
#no：表示等操作系统进行数据缓存同步到磁盘（快）
#always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）
#everysec：表示每秒同步一次（折衷，默认值）
appendfsync everysec
&lt;/code>&lt;/pre>&lt;h2 id="docker">Docker&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#最新镜像&lt;/span>
docker pull redis
&lt;span class="c1">#运行&lt;/span>
docker run -itd --name redis-test -p 6379:6379 redis docker image inspect redis:latest&lt;span class="p">|&lt;/span>grep -i version
&lt;span class="c1">#运行&lt;/span>
docker &lt;span class="nb">exec&lt;/span> -it redis-test /bin/bash
$ redis-cli
&amp;gt; info
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>指定配置文件运行&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -p 6379:6379 --name redis-test -v /etc/redis/redis.conf:/etc/redis/redis.conf -v /etc/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>停止&lt;/p>
&lt;pre>&lt;code>docker stop redis-test
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul></description></item><item><title>Hugo搭建博客</title><link>https://fengzhenbing.github.io/p/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link><pubDate>Tue, 08 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p>通过Hugo搭建静态博客网站，再通过github pages部署运行&lt;/p>
&lt;h3 id="hugo介绍">Hugo介绍&lt;/h3>
&lt;ul>
&lt;li>Hugo是一种用Go语言编写的快速，现代的静态网站生成器，旨在让网站创建再次变得有趣。&lt;/li>
&lt;li>性能高，安全性和易用性是主要特点&lt;/li>
&lt;li>拥有超快的速度，强大的内容管理和强大的模板语言，使其非常适合各种静态网站。&lt;/li>
&lt;/ul>
&lt;h3 id="hugo安装">Hugo安装&lt;/h3>
&lt;pre>&lt;code># mac上安装
brew install hugo
# windows可通过Chocolatey上安装
choco install hugo -confirm
# 版本验证
hugo version
&lt;/code>&lt;/pre>&lt;h3 id="hugo主题">hugo主题&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>查找你喜欢的主题&lt;/a>&lt;/li>
&lt;li>在此我选择的主题为toha &lt;a class="link" href="https://toha-guides.netlify.app/posts/getting-started/" target="_blank" rel="noopener"
>详情&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="初始化网站模板">初始化网站模板&lt;/h3>
&lt;pre>&lt;code># 首先在github下创建xxx.github.io的仓库
git clone https://github.com/fengzhenbing/fengzhenbing.github.io.git
cd ./fengzhenbing.github.io
# 初始化模板
hugo new site ./ -f=yaml --force
#添加hugo-toha主题
git submodule add https://github.com/hugo-toha/toha.git themes/toha
#本地运行
hugo server -t toha -w
&lt;/code>&lt;/pre>&lt;h3 id="修改配置">修改配置&lt;/h3>
&lt;p>参考themes/toha/exampleSite，配置网站根目录下的config.yml文件，配置网站各个模块&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">baseURL&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://fengzhenbing.github.io/&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">languageCode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">en-us&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">defaultContentLanguage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cn&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Feng Zhenbing&amp;#39;s Blog&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">theme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;toha&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Manage languages&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># For any more details, you can check the official documentation: https://gohugo.io/content-management/multilingual/&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">languages&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cn&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">languageName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">中文&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">weight&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># en:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># languageName: English&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># weight: 2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Control TOC depth&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">markup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tableOfContents&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">startLevel&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">endLevel&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">6&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ordered&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Enable global emoji support&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">enableEmoji&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Site parameters&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># GitHub repo URL of your site&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gitRepo&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.com/fengzhenbing/fengzhenbing.github.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gitBranch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># specify whether you want to write some blog posts or not&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enableBlogPost&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># specify whether you want to show Table of Contents in reading page&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enableTOC&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Provide newsletter configuration. This feature hasn&amp;#39;t been implemented yet.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Currently, you can just hide it from the footer.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">newsletter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enable&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>至此浏览器中查看&lt;a class="link" href="http://localhost:1313/" target="_blank" rel="noopener"
>http://localhost:1313/&lt;/a> 可看到大致的博客网站,&lt;/li>
&lt;li>更多细节查看&lt;a class="link" href="https://toha-guides.netlify.app/posts/getting-started/prepare-site/" target="_blank" rel="noopener"
>https://toha-guides.netlify.app/posts/getting-started/prepare-site/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="github-pages-中部署">Github Pages 中部署&lt;/h3>
&lt;ul>
&lt;li>创建分支&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>#github 创建部署文件的分支
git branch -b gh-pages
git push
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>github中setting中将部署分支设为gh-pages分支
&lt;img src="https://fengzhenbing.github.io/img.png" alt="img.png" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开启github actions
&lt;img src="https://fengzhenbing.github.io/img_1.png" alt="img_1.png" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编写github actions的部署文件&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># 进入网站根目录，创建./github/workflows目录&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="l">mkdir ./github/workflows&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="l">cd ./github/workflows&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="l">vim deploy-site.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>deploy-site.yaml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy to Github Pages&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># run when a commit or pr is pushed to &amp;#34;master&amp;#34; branch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pull_request&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-18.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># checkout to the commit that has been pushed&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch Hugo themes (true OR recursive)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fetch-depth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch all history for .GitInfo and .Lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># install Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;0.77.0&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">extended&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># build website&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hugo --minify&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># push the generated content into the `main` (former `master`) branch.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-gh-pages@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">github.event_name == &amp;#39;push&amp;#39; &amp;amp;&amp;amp; github.ref == &amp;#39;refs/heads/master&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">github_token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GITHUB_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_branch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gh-pages&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># if your main branch is `master` use that here.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_dir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./public&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>提交后，每次改动master分支，github action会运行以上任务，自动打包文件到gh-pages分支，并部署&lt;/p></description></item><item><title>配置中心刷新</title><link>https://fengzhenbing.github.io/p/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E5%88%B7%E6%96%B0/</link><pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E5%88%B7%E6%96%B0/</guid><description>&lt;h2 id="配置中心刷新原理">配置中心刷新原理&lt;/h2>
&lt;p>nacos和spring cloud config两种配置中心动态刷新的范围都是以下两种：&lt;/p>
&lt;ul>
&lt;li>@ConfigurationProperties 注解的配置类&lt;/li>
&lt;li>@RefreshScope 注解的bean&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img-blog.csdnimg.cn/20190308142218999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dvc2hpbGlqaXV5aQ==,size_16,color_FFFFFF,t_70" alt="img" />&lt;/p>
&lt;h2 id="手动刷新">手动刷新&lt;/h2>
&lt;p>post请求config客户端的/refresh端点&lt;/p>
&lt;h2 id="自动刷新">自动刷新&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>WebHooks动态触发刷新&lt;/p>
&lt;/li>
&lt;li>
&lt;p>spring-cloud-bus动态刷新&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://springcloud-oss.oss-cn-shanghai.aliyuncs.com/chapter8/configbus2.jpg" alt="img" />&lt;/p>
&lt;p>这时Spring Cloud Bus做配置更新步骤如下:&lt;/p>
&lt;ol>
&lt;li>提交代码触发post给Server端发送bus/refresh&lt;/li>
&lt;li>Server端接收到请求并发送给Spring Cloud Bus&lt;/li>
&lt;li>Spring Cloud bus接到消息并通知给其它客户端&lt;/li>
&lt;li>其它客户端接收到通知，请求Server端获取最新配置&lt;/li>
&lt;li>全部客户端均获取到最新的配置&lt;/li>
&lt;/ol>
&lt;p>这样的话我们在server端的代码做一些改动，来支持/actuator/bus-refresh&lt;/p>
&lt;h2 id="spring-cloud-bus">Spring Cloud Bus&lt;/h2>
&lt;p>Spring Cloud Bus 使用轻量级的消息代理来连接微服务架构中的各个服务，可以将其用于广播状态更改（例如配置中心配置更改）或其他管理指令&lt;/p>
&lt;p>目前 Spring Cloud Bus 支持两种消息代理：RabbitMQ 和 Kafka。&lt;/p>
&lt;p>参考&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/woshilijiuyi/article/details/88293782">https://blog.csdn.net/woshilijiuyi/article/details/88293782&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/babycomeon/p/11141160.html">https://www.cnblogs.com/babycomeon/p/11141160.html&lt;/a>&lt;/p></description></item><item><title>小程序框架</title><link>https://fengzhenbing.github.io/p/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6/</link><pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6/</guid><description>&lt;h2 id="小程序原理">小程序原理&lt;/h2>
&lt;p>&lt;img src="https://fengzhenbing.github.io/images/blog/image-20210313143033016.png" alt="image-20210313143033016" />&lt;/p>
&lt;ul>
&lt;li>使用两个线程：保证平台安全性，不能让开发者控制 render 线程，控制 render 线程将会造成小程序平台方管控困难&lt;/li>
&lt;li>worker线程： 用户控制
&lt;ul>
&lt;li>响应 render 线程的事件，并执行小程序业务逻辑。&lt;/li>
&lt;li>准备好数据，通过 setData 传到 page 中，由 page 进行渲染。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>render线程：接收数据渲染到页面&lt;/li>
&lt;/ul>
&lt;h2 id="taro">TARO&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://taro-docs.jd.com/taro/docs/GETTING-STARTED" target="_blank" rel="noopener"
>官网&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://taro-ui.jd.com/">https://taro-ui.jd.com/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特点&lt;/p>
&lt;ul>
&lt;li>
&lt;p>编译时转换&lt;/p>
&lt;/li>
&lt;li>
&lt;p>React vue &amp;hellip;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一套组件可以在 &lt;code>微信小程序&lt;/code>，&lt;code>支付宝小程序&lt;/code>，&lt;code>百度小程序&lt;/code>，&lt;code>H5&lt;/code> 多端适配运行&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>创建项目&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 使用 npm 安装 CLI&lt;/span>
$ npm install -g @tarojs/cli
&lt;span class="c1"># OR 使用 yarn 安装 CLI&lt;/span>
$ yarn global add @tarojs/cli
&lt;span class="c1"># OR 安装了 cnpm，使用 cnpm 安装 CLI&lt;/span>
$ cnpm install -g @tarojs/cli
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="remax">Remax&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://remaxjs.org/" target="_blank" rel="noopener"
>官网&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特点&lt;/p>
&lt;ul>
&lt;li>
&lt;p>运行时转换:worker 线程维护一棵 vdom tree，然后同步到 render 线程通过 w|axml 来进行渲染。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>react开发&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多平台支持：支持阿里程序、微信小程序(QQ小程序)、头条小程序以及 Web 应用的开发。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>创建项目&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npx create-remax-app my-app
&lt;span class="nb">cd&lt;/span> my-app &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> npm install
npm run dev &amp;lt;platform&amp;gt; &lt;span class="c1"># 跨平台，如：要在阿里小程序环境运行，则 npm run dev ali&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>案例&lt;a class="link" href="https://github.com/remaxjs/awesome-remax" target="_blank" rel="noopener"
>https://github.com/remaxjs/awesome-remax&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="webpy">WebPY&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://wepyjs.gitee.io/" target="_blank" rel="noopener"
>官网&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特点&lt;/p>
&lt;ul>
&lt;li>类似Vue开发&lt;/li>
&lt;li>腾讯出品：小程序最早的框架之一&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>创建项目&lt;/p>
&lt;pre>&lt;code>$ npm install @wepy/cli -g # 全局安装 WePY CLI 工具
$ wepy init standard myproj # 使用 standard 模板初始化项目
$ cd myproj # 进入到项目目录
$ npm install # 安装项目依赖包
$ npm run dev # 监听并且编译项目
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>案例&lt;a class="link" href="https://github.com/aben1188/awesome-wepy" target="_blank" rel="noopener"
>https://github.com/aben1188/awesome-wepy&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="kbone">Kbone&lt;/h2>
&lt;ul>
&lt;li>特点
&lt;ul>
&lt;li>运行时转换:worker 线程维护一棵 vdom tree，然后同步到 render 线程通过 w|axml 来进行渲染。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="uniapp">uniapp&lt;/h2>
&lt;p>参考：&lt;a class="link" href="https://developers.weixin.qq.com/community/develop/article/doc/000200eb844228d72f79291a651c13" target="_blank" rel="noopener"
>小程序多平台同构方案分析-kbone 与 remax&lt;/a>&lt;/p></description></item><item><title>kafka基础</title><link>https://fengzhenbing.github.io/p/kafka%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 20 Oct 2020 14:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/kafka%E5%9F%BA%E7%A1%80/</guid><description>&lt;h2 id="kafka相关概念">kafka相关概念&lt;/h2>
&lt;p>二代mq, scala开发&lt;/p>
&lt;ul>
&lt;li>
&lt;p>broker&lt;/p>
&lt;p>Kafka 集群包含一个或多个服务器，这种服务器被称为 broker。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>topic&lt;/p>
&lt;p>每条发布到 Kafka 集群的消息都有一个类别，这个类别被称为 Topic。 (物理上不同 Topic 的消息分开存储，逻辑上一个 Topic 的消息虽然保存于一个或 多个 broker 上，但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数 据存于何处)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>patition&lt;/p>
&lt;p>Partition 是物理上的概念，每个 Topic 包含一个或多个 Partition。&lt;/p>
&lt;p>消息会根据 &lt;strong>分区策略&lt;/strong> 追加到分区文件的末尾，属于&lt;strong>顺序写磁盘，因此效率非常高&lt;/strong>（经验证，顺序写磁盘效率比随机写内存还要高，这是Kafka高吞吐率的一个很重要的保证）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>producer&lt;/p>
&lt;p>负责发布消息到 Kafka broker。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>customer&lt;/p>
&lt;p>消息消费者，向 Kafka broker 读取消息的客户端&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Customer group&lt;/p>
&lt;p>consumer group是kafka提供的可扩展且具有容错性的消费者机制。既然是一个组，那么组内必然可以有多个消费者或消费者实例(consumer instance)，它们共享一个公共的ID，即group ID。组内的所有消费者协调在一起来消费订阅主题(subscribed topics)的所有分区(partition)。当然，每个分区只能由同一个消费组内的一个consumer来消费。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ul>
&lt;li>consumer group下可以有一个或多个consumer instance，consumer instance可以是一个进程，也可以是一个线程&lt;/li>
&lt;li>group.id是一个字符串，唯一标识一个consumer group&lt;/li>
&lt;li>consumer group下订阅的topic下的每个分区只能分配给某个group下的一个consumer(当然该分区还可以被分配给其他group)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>leader&lt;/p>
&lt;p>每个partition有多个副本，其中有且仅有一个作为leader，leader会负责所有的客户端读写操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>follower&lt;/p>
&lt;p>follower不对外提供服务，只与leader保持数据同步，如果leader失效，则选举一个follower来充当新的leader。当follower与leader挂掉、卡住或者同步太慢，leader会把这个follower从ISR列表中删除，重新创建一个follower。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rebalance&lt;/p>
&lt;ul>
&lt;li>服务端partition数量扩大&lt;/li>
&lt;li>消费者组中某个消费者down掉&lt;/li>
&lt;li>消费者组中加入新的消费者&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="kafka吞吐量为什么这么高">kafka吞吐量为什么这么高&lt;/h2>
&lt;h3 id="顺序读写磁盘">顺序读写磁盘&lt;/h3>
&lt;h3 id="page-cache">page cache&lt;/h3>
&lt;p>Kafka利用了操作系统本身的Page Cache&lt;/p>
&lt;h3 id="零拷贝">零拷贝&lt;/h3>
&lt;p>零拷贝就是使用了一个名为sendfile()的系统调用方法，将数据从page cache直接发送到Socket缓冲区，避免了系统上下文的切换，消除了从内核空间到用户空间的来回复制。从下图可以看出，&amp;ldquo;零拷贝&amp;quot;并不是说整个过程完全不发生拷贝，而是站在内核的角度来说的，避免了内核空间到用户空间的来回拷贝。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20211007195405264.png" alt="image-20211007195405264" />&lt;/p>
&lt;h2 id="topic特性">Topic特性&lt;/h2>
&lt;ol>
&lt;li>通过partition增加可扩展性：线上改partion数，rebalance ，会照成性能抖动。&lt;/li>
&lt;li>partition有序达到高吞吐&lt;/li>
&lt;li>partition多副本增加容错性&lt;/li>
&lt;/ol>
&lt;h2 id="kafka单机">kafka单机&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安装 &lt;a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改配置&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">cd&lt;/span> kafka_2.13-2.7.0
&lt;span class="c1"># 打开 listeners=PLAINTEXT://localhost:9092&lt;/span>
vim config/server.properties
&lt;span class="c1"># 启动zookeeper&lt;/span>
bin/zookeeper-server-start.sh config/zookeeper.properties
&lt;span class="c1"># 启动kafaka&lt;/span>
bin/kafka-server-start.sh config/server.properties
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>命令测试&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 创建topic&lt;/span>
mokernetdeMac-mini:kafka_2.13-2.7.0 mokernet$ bin/kafka-topics.sh --zookeeper localhost:2181 --create --topic testf --partitions &lt;span class="m">4&lt;/span> --replication-factor &lt;span class="m">1&lt;/span>
Created topic testf.
&lt;span class="c1"># 查看&lt;/span>
bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic testf
&lt;span class="c1"># 消费者从头开始消费&lt;/span>
bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic testf
&lt;span class="c1"># 生产者生产&lt;/span>
bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic testf
&lt;span class="c1"># 生产者性能测试 100万条数据 每条1000byte 限流100万条&lt;/span>
bin/kafka-producer-perf-test.sh --topic testf --num-records &lt;span class="m">1000000&lt;/span> --record-size &lt;span class="m">1000&lt;/span> --throughput &lt;span class="m">1000000&lt;/span> --producer-props bootstrap.servers&lt;span class="o">=&lt;/span>localhost:9092
&lt;span class="c1"># 消费者性能测试 消费100万条数据 一个线程&lt;/span>
bin/kafka-consumer-perf-test.sh --bootstrap-server localhost:9092 --topic testf --fetch-size &lt;span class="m">1048576&lt;/span> --messages &lt;span class="m">1000000&lt;/span> --threads &lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="kafka集群">kafka集群&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>修改各个节点的三个属性配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 复制新的配置文件&lt;/span>
cp config/server.properties config/server-1.properties
cp config/server.properties config/server-2.properties
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code class="language-properties" data-lang="properties"># 修改 id 端口 数据文件目录
# config/server-1.properties:
broker.id=1
listeners=PLAINTEXT://:9093
log.dir=/tmp/kafka-logs-1
&lt;/code>&lt;/pre>&lt;pre>&lt;code class="language-properties" data-lang="properties"># 修改 id 端口 数据文件目录
# config/server-2.properties:
broker.id=2
listeners=PLAINTEXT://:9094
log.dir=/tmp/kafka-logs-2
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>启动&lt;/p>
&lt;pre>&lt;code>bin/kafka-server-start.sh config/server.properties &amp;amp;
bin/kafka-server-start.sh config/server-1.properties &amp;amp;
bin/kafka-server-start.sh config/server-2.properties &amp;amp;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>测试&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 创建topic test42 4个patition 2个副本&lt;/span>
bin/kafka-topics.sh --zookeeper localhost:2181 --create --topic test42 --partitions &lt;span class="m">4&lt;/span> --replication-factor &lt;span class="m">2&lt;/span>
&lt;span class="c1"># 查看&lt;/span>
mokernetdeMac-mini:kafka_2.13-2.7.0 mokernet$ bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic test42
Topic: test42 PartitionCount: &lt;span class="m">4&lt;/span> ReplicationFactor: &lt;span class="m">2&lt;/span> Configs:
Topic: test42 Partition: &lt;span class="m">0&lt;/span> Leader: &lt;span class="m">1&lt;/span> Replicas: 1,2 Isr: 1,2
Topic: test42 Partition: &lt;span class="m">1&lt;/span> Leader: &lt;span class="m">2&lt;/span> Replicas: 2,0 Isr: 2,0
Topic: test42 Partition: &lt;span class="m">2&lt;/span> Leader: &lt;span class="m">0&lt;/span> Replicas: 0,1 Isr: 0,1
Topic: test42 Partition: &lt;span class="m">3&lt;/span> Leader: &lt;span class="m">1&lt;/span> Replicas: 1,0 Isr: 1,0
&lt;span class="c1"># 消费者从头开始消费&lt;/span>
bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic test42
&lt;span class="c1"># 生产者生产&lt;/span>
bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic test42
&lt;span class="c1"># 容错性测试 ，关闭id=1的broker&lt;/span>
ps aux &lt;span class="p">|&lt;/span> grep server-1.properties
&amp;gt; mokernet &lt;span class="m">30302&lt;/span> 0.0 1.9 &lt;span class="m">7323756&lt;/span> &lt;span class="m">405020&lt;/span> s006 S+ 10:31PM 0:16.87 /usr/bin/java -Xmx
&lt;span class="nb">kill&lt;/span> -9 &lt;span class="m">30302&lt;/span>
&lt;span class="c1">#查看 如下，rebalance&lt;/span>
mokernetdeMac-mini:kafka_2.13-2.7.0 mokernet$ bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic test42
Topic: test42 PartitionCount: &lt;span class="m">4&lt;/span> ReplicationFactor: &lt;span class="m">2&lt;/span> Configs:
Topic: test42 Partition: &lt;span class="m">0&lt;/span> Leader: &lt;span class="m">2&lt;/span> Replicas: 1,2 Isr: &lt;span class="m">2&lt;/span>
Topic: test42 Partition: &lt;span class="m">1&lt;/span> Leader: &lt;span class="m">2&lt;/span> Replicas: 2,0 Isr: 2,0
Topic: test42 Partition: &lt;span class="m">2&lt;/span> Leader: &lt;span class="m">0&lt;/span> Replicas: 0,1 Isr: &lt;span class="m">0&lt;/span>
Topic: test42 Partition: &lt;span class="m">3&lt;/span> Leader: &lt;span class="m">0&lt;/span> Replicas: 1,0 Isr: &lt;span class="m">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="kafka-connect">Kafka connect&lt;/h2>
&lt;ul>
&lt;li>通过kafka导入导出数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 写入数据到输入文件 test.txt&lt;/span>
&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;testtest&amp;#34;&lt;/span> &amp;gt; test.txt
&lt;span class="c1"># 启动connect&lt;/span>
&lt;span class="c1"># 三个配置文件： &lt;/span>
&lt;span class="c1"># 1. Kafka Connect的配置文件，包含常用的配置，如Kafka brokers连接方式和数据的序列化格式。&lt;/span>
&lt;span class="c1"># 2. 源连接器配置，用于从输入文件读取行，并将其输入到 Kafka topic&lt;/span>
&lt;span class="c1"># 3. 接收器连接器配置，它从Kafka topic中读取消息，并在输出文件中生成一行。&lt;/span>
bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties
&lt;span class="c1"># 查看输出文件， 可以看到不断地往 test.txt写入数据时，test.sink.txt 会持续产生数据&lt;/span>
tail -f test.sink.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kafka-stream">Kafka stream&lt;/h2>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="kafka-特点">Kafka 特点&lt;/h2>
&lt;ul>
&lt;li>高吞吐量、低延迟：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒；&lt;/li>
&lt;li>可扩展性：kafka集群支持热扩展；&lt;/li>
&lt;li>持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止丢失；&lt;/li>
&lt;li>容错性：允许集群中的节点失败(若分区副本数量为n,则允许n-1个节点失败)；&lt;/li>
&lt;li>高并发：单机可支持数千个客户端同时读写；&lt;/li>
&lt;/ul>
&lt;h2 id="使用场景">使用场景&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>消息系统&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志聚合&lt;/p>
&lt;/li>
&lt;li>
&lt;p>度量监控&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流式处理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跟踪网站浏览记录&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="相关资料">相关资料&lt;/h2>
&lt;p>参考 &lt;a href="https://kafka.apachecn.org/">https://kafka.apachecn.org/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s?__biz=MzU1NDA0MDQ3MA==&amp;amp;mid=2247483958&amp;amp;idx=1&amp;amp;sn=dffaad318b50f875eea615bc3bdcc80c&amp;amp;chksm=fbe8efcfcc9f66d9ff096fbae1c2a3671f60ca4dc3e7412ebb511252e7193a46dcd4eb11aadc&amp;amp;scene=21#wechat_redirect" target="_blank" rel="noopener"
>大白话 kafka 架构原理&lt;/a>&lt;/p></description></item><item><title>消息基础</title><link>https://fengzhenbing.github.io/p/%E6%B6%88%E6%81%AF%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 11 Oct 2020 09:16:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/%E6%B6%88%E6%81%AF%E5%9F%BA%E7%A1%80/</guid><description>&lt;h2 id="消息队列作用">消息队列作用&lt;/h2>
&lt;ol>
&lt;li>异步通信：异步通信，减少线程等待，特别是处理批量等大事务、耗时操作。&lt;/li>
&lt;li>系统解耦:系统不直接调用，降低依赖，特别是不在线也能保持通信最终完成。&lt;/li>
&lt;li>削峰填谷:压力大的时候，缓冲部分请求消息，类似于背压处理。&lt;/li>
&lt;li>可靠通信:提供多种消息模式、服务质量、顺序保障等。&lt;/li>
&lt;/ol>
&lt;h2 id="消息处理模式">消息处理模式&lt;/h2>
&lt;ol>
&lt;li>点对点： PTP =&amp;gt; queue&lt;/li>
&lt;li>发布订阅： PubSub =&amp;gt; Topic&lt;/li>
&lt;/ol>
&lt;h2 id="消息语义-qos">消息语义 QOS&lt;/h2>
&lt;ol>
&lt;li>At most once&lt;/li>
&lt;li>At least once&lt;/li>
&lt;li>Exactly once&lt;/li>
&lt;/ol>
&lt;h2 id="支持数据不丢失的ack机制">&lt;em>&lt;strong>*支持数据不丢失的ack机制*&lt;/strong>&lt;/em>&lt;/h2></description></item><item><title>innodb概述及原理</title><link>https://fengzhenbing.github.io/p/innodb%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%8E%9F%E7%90%86/</link><pubDate>Sat, 12 Sep 2020 14:16:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/innodb%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%8E%9F%E7%90%86/</guid><description>&lt;h2 id="heading">&lt;/h2>
&lt;h3 id="innodb概述">Innodb概述&lt;/h3>
&lt;p>该存储引擎是第一个完整支持ACID事 务的MySOL存储引擎，其特点是行锁设计、支持MVCC、支持外键、提供一致性非锁定读，同时被设计用来最有效地利用以及使用内存和CPU；&lt;/p>
&lt;p>体系结构如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20211005142610433.png" alt="image-20211005142610433" />&lt;/p>
&lt;p>InnoDB存储引擎有多个内存块，这些内存块组成一个内存池，主要负责如下工作：&lt;/p>
&lt;ul>
&lt;li>维护所有进程、线程需要访问的多个内部数据结构&lt;/li>
&lt;li>缓存磁盘上的数据，方便快速读取，同时在对磁盘文件的数据修改之前在这里缓存&lt;/li>
&lt;li>重做日志（redo log）缓冲&lt;/li>
&lt;/ul>
&lt;p>后台线程的主要作用：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>负责刷新内存池中的数据，保证缓冲池中的内存缓存的是最近的数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将已修改的数据文件刷新到磁盘文件&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="innodb-内存结构">innodb 内存结构&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20211005144108370.png" alt="image-20211005144108370" />&lt;/p>
&lt;h4 id="缓冲池">缓冲池&lt;/h4>
&lt;p>InnoDB存储引擎是基于磁盘存储的，并将其中的记录按照页的方式进行管理。因此 可将其视为基于磁盘的数据库系统 (Disk-baseDatabase)。在数据库系统中，由于&lt;strong>CPU 速度与磁盘速度之间的鸿沟&lt;/strong>，基于磁盘的数据库系统通常使用缇冲池技术来提高数据库 的整体性能 .&lt;/p>
&lt;p>缓冲池简单来说就是一块内存区域，通过内存的速度来弥补磁盘速度较慢对数据库性能的影响。在数据库中进行读取页的操作，首先将从磁盘读到的页存放在缓冲他中 这个过程称为将页“FIX”在缓冲池中。下一次再读相同的页时，首先判断该页是否在 缓冲他中，若在缓冲池中，称该页在缓冲池中被命中，直接读取该页。否则，读取磁盘 上的页 .&lt;/p>
&lt;p>对于数据库中页的修改操作，则首先修改在缓冲池中的页，然后再以一定的频率刷 新到磁盘上，这里需要注意的是，页从缓冲池剧新回磁盘的操作并不是在每次页发生更新时触发，而是通过一种称为&lt;strong>Checkpoint的机制&lt;/strong>刷新, 提高据库的整体性能&lt;/p>
&lt;p>综上所述，&lt;strong>缓冲池的大小&lt;/strong> 直接影响着数据库的整体性能。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="w"> &lt;/span>&lt;span class="k">SHOW&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VARIABLES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LIKE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;innodb_buffer_poo1_size&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="k">G&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="缓冲池管理-lru-free-flush">缓冲池管理 LRU Free Flush&lt;/h4>
&lt;h5 id="lru-list">LRU list&lt;/h5>
&lt;p>通常来说 数据库中的缓冲池是通过LRU (Latest Recent Used， 最近最少使用》 算法来进行管理的, 即最频繁使用的页(一页16k)在LRU列表的前端，而最少使用的页在 LRU列表的尾端, 当缓冲池不能存放新读取到的页时 将首先释放LRU列表中尾 端的页.&lt;/p>
&lt;p>Buffer Pool的LRU算法与普通的LRU算法不一样，新数据页插入时并不从头部插入，而是从中间位置插入（默认配置下，该位置从表头计算为列表5/8的位置)，在该位置，列表被分成了如下两个子列表：&lt;/p>
&lt;ul>
&lt;li>在头部是最近被访问的新页列表&lt;/li>
&lt;li>在尾部是很少被访问的旧页列表&lt;/li>
&lt;/ul>
&lt;p>可以和jvm的young区 old区类比。&lt;/p>
&lt;h5 id="为什么这么设计">为什么这么设计？？&lt;/h5>
&lt;p>直接将读取的页放人到LRU列表的首部呢?这是因为若直接将读取到的页放人到LRU的首部，那么某些SOL操作可能会使缓冲池中 的页被刷新出，从而影响缓冲池的效率。常见的这类操作为索引或数据的扫描操作。这 类操作需要访问表中的许多页，甚至是全部的页，而这些页通常来说又仅在这次查询操 作中需要，并不是活跃的热点数据。如果页被放人LRU列表的首部，那么非常可能将 所需要的热点数据页从LRU列表中移除，而在下一次需要读取该页时， InnoDB存储引 肇需要再次访问磁盘&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/format,png-20211005153839472.png" alt="Content is described in the surrounding text." />&lt;/p>
&lt;h4 id="查看内存状态">查看内存状态&lt;/h4>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20211005152044108.png" alt="image-20211005152044108" />&lt;/p>
&lt;h3 id="checkpoint">Checkpoint&lt;/h3>
&lt;p>Checkpoint(检查点)技术的目的是解决以下几个间题&lt;/p>
&lt;ul>
&lt;li>
&lt;p>缩短数据库的恢复时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>绥冲池不够用时，将脏页刷新到磁盘&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重做日志不可用时，刷新脏页&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>当数据库发生容机时，数据库不需要重做所有的目志，因为Checkpoint之前的页都 已经刷新回磁盘。故数据库只需对Checkpoint后的重做目志进行恢复。这样就大大缩短 了恢复的时间.&lt;/p></description></item><item><title>数据库日志总结</title><link>https://fengzhenbing.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A5%E5%BF%97%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 12 Sep 2020 14:16:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A5%E5%BF%97%E6%80%BB%E7%BB%93/</guid><description>&lt;h2 id="heading">&lt;/h2>
&lt;h3 id="undo-log">undo log&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>是&lt;code>InnoDB&lt;/code>存储引擎独有的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行&lt;strong>回滚&lt;/strong>，在 MySQL 中，恢复机制是通过 &lt;strong>回滚日志（undo log）&lt;/strong> 实现的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mvcc 多版本的记录在undo log中&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="redo-log">redo log&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>是&lt;code>InnoDB&lt;/code>存储引擎独有的物理日志，记录内容是“在某个数据页上做了什么修改”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>redo log&lt;/code>（重做日志），它让&lt;code>MySQL&lt;/code>拥有了崩溃恢复能力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配合checkpoint循环使用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="binlog">binlog&lt;/h3>
&lt;ul>
&lt;li>&lt;code>binlog&lt;/code> 是逻辑日志，记录内容是语句的原始逻辑，类似于“给 ID=2 这一行的 c 字段加 1”，属于&lt;code>MySQL Server&lt;/code> 层。&lt;/li>
&lt;li>二进制目志 (binary log)记录了对MySQL数据库执行更改的所有操作，但是不包 括SELECT和SHOW这类操作，因为这类操作对数据本身并没有修改。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>binlog&lt;/code> 日志有三种格式，可以通过&lt;code>binlog_format&lt;/code>参数指定。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>statement&lt;/strong>&lt;/li>
&lt;li>&lt;strong>row&lt;/strong>&lt;/li>
&lt;li>&lt;strong>mixed&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="用途">用途：&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>恢复 (recovery):某些数据的恢复需要二进制日志，例如，在一个数据库全备文 件恢复后，用户可以通过二进制日志进行point-in-time的恢复&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复制 (replication):其原理与恢复类似，通过复制和执行二进制日志使一台远程 的MySQL数据库 (一般称为slave或standby) 与一台MySQL数据库(一般称 /master或primary) 进行实时同步&lt;/p>
&lt;/li>
&lt;li>
&lt;p>审计 (audit): 用户可以通过二进制日志中的信息来进行审计，判断是否有对数 据库进行注入的攻击&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="relay-log">relay log&lt;/h3>
&lt;p>中继日志，基于binlog的主从同步&lt;/p>
&lt;p>&lt;em>&lt;strong>*工作原理*&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>*&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/1297933-20190705153223795-497941446.png" alt="img" />*&lt;/strong>&lt;/em>&lt;/p>
&lt;p>1、主节点必须启用二进制日志，记录任何修改了数据库数据的事件。
2、从节点开启一个线程（I/O Thread)把自己扮演成 mysql 的客户端，通过 mysql 协议，请求主节点的二进制日志文件中的事件
3、主节点启动一个线程（dump Thread），检查自己二进制日志中的事件，跟对方请求的位置对比，如果不带请求位置参数，则主节点就会从第一个日志文件中的第一个事件一个一个发送给从节点。
4、从节点接收到主节点发送过来的数据把它放置到中继日志（Relay log）文件中。并记录该次请求到主节点的具体哪一个二进制日志文件内部的哪一个位置（主节点中的二进制文件会有多个，在后面详细讲解）。
5、从节点启动另外一个线程（sql Thread ），把 Relay log 中的事件读取出来，并在本地再执行一次&lt;/p></description></item><item><title>单例</title><link>https://fengzhenbing.github.io/p/%E5%8D%95%E4%BE%8B/</link><pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E5%8D%95%E4%BE%8B/</guid><description>&lt;h3 id="单例模式">单例模式&lt;/h3>
&lt;blockquote>
&lt;p>在运行期间，保证某个类只创建一个实例，保证一个类仅有一个实例，并提供一个访问它的全局访问点&lt;/p>
&lt;/blockquote>
&lt;h3 id="饿汉式">饿汉式&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">Singleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>优点就是实现简单，而且安全可靠&lt;/li>
&lt;li>缺点，没有懒加载，可能用不到，却实例化了&lt;/li>
&lt;/ul>
&lt;h3 id="懒汉式">懒汉式&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SingletonSafe&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 防止指令重排
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="n">SingletonSafe&lt;/span> &lt;span class="n">singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">SingletonSafe&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">SingletonSafe&lt;/span> &lt;span class="nf">getSingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">singleton&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SingletonSafe&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">singleton&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">singleton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SingletonSafe&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>双重检查，保证线程安全&lt;/p>
&lt;h3 id="静态内部类">静态内部类&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SingletonHolder&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">Singleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">SingletonHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>通过静态内部类的方式实现单例模式是线程安全的，同时静态内部类不会在Singleton类加载时就加载，而是在调用getInstance()方法时才进行加载，达到了懒加载的效果。&lt;/li>
&lt;li>缺点：可能会有反射攻击或者反序列化攻击&lt;/li>
&lt;/ul>
&lt;h3 id="通过枚举实现单例模式推荐">通过枚举实现单例模式（推荐）&lt;/h3>
&lt;p>effective java推荐&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Inst singleton.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">INST&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * The Singles.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">SINGLES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Single.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param clazz the clazz
&lt;/span>&lt;span class="cm"> * @param o the o
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">single&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SINGLES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Get t.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param &amp;lt;T&amp;gt; the type parameter
&lt;/span>&lt;span class="cm"> * @param clazz the clazz
&lt;/span>&lt;span class="cm"> * @return the t
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">SINGLES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>分布式事务</title><link>https://fengzhenbing.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link><pubDate>Thu, 13 Aug 2020 14:16:25 +0600</pubDate><guid>https://fengzhenbing.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid><description>&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/20200526140940829.png" alt="20200526140940829" />&lt;/p>
&lt;h2 id="两段式提交">两段式提交&lt;/h2>
&lt;p>（2 Phase Commit，2PC）&lt;/p>
&lt;h3 id="准备阶段">&lt;strong>准备阶段&lt;/strong>&lt;/h3>
&lt;p>重操作&lt;/p>
&lt;h3 id="提交阶段">&lt;strong>提交阶段&lt;/strong>&lt;/h3>
&lt;p>轻操作&lt;/p>
&lt;h2 id="三段式提交">三段式提交&lt;/h2>
&lt;p>（3 Phase Commit，3PC）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在事务需要回滚的场景中：三段式的性能通常是要比两段式好很多的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>但在事务能够正常提交的场景中：两者的性能都依然很差，甚至三段式因为多了一次询问，还要稍微更差一些。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="cancommit">&lt;strong>CanCommit&lt;/strong>&lt;/h3>
&lt;p>轻操作&lt;/p>
&lt;h3 id="precommit">&lt;strong>PreCommit&lt;/strong>&lt;/h3>
&lt;p>重操作&lt;/p>
&lt;h3 id="cancommit-1">&lt;strong>CanCommit&lt;/strong>&lt;/h3>
&lt;p>轻操作&lt;/p>
&lt;h2 id="tcc事务">TCC事务&lt;/h2>
&lt;p>业务侵入性强&lt;/p>
&lt;p>加入业务的中间字段&lt;/p>
&lt;h3 id="try">Try&lt;/h3>
&lt;h3 id="confirm">confirm&lt;/h3>
&lt;p>冥等&lt;/p>
&lt;h3 id="cancel">cancel&lt;/h3>
&lt;h2 id="at事务">AT事务&lt;/h2>
&lt;p>反向sql&lt;/p></description></item><item><title>高可用之限流</title><link>https://fengzhenbing.github.io/p/%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description>&lt;h3 id="系统调用">系统调用&lt;/h3>
&lt;ol>
&lt;li>用户态(user mode) : 用户态运行的进程可以直接读取用户程序的数据。&lt;/li>
&lt;li>系统态(kernel mode):可以简单的理解系统态运行的进程或程序几乎可以访问计算机的任何资源，不受限制。&lt;/li>
&lt;/ol>
&lt;p>凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。&lt;/p>
&lt;h3 id="进程的调度算法">进程的调度算法&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>先到先服务(FCFS)调度算法&lt;/strong>&lt;/li>
&lt;li>&lt;strong>短作业优先(SJF)的调度算法&lt;/strong>&lt;/li>
&lt;li>&lt;strong>时间片轮转调度算法&lt;/strong>&lt;/li>
&lt;li>&lt;strong>多级反馈队列调度算法&lt;/strong>&lt;/li>
&lt;li>&lt;strong>优先级调度&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="死锁">死锁&lt;/h3>
&lt;p>必要条件&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>互斥&lt;/strong>：资源必须处于非共享模式，即一次只有一个进程可以使用。如果另一进程申请该资源，那么必须等待直到该资源被释放为止。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>占有并等待&lt;/strong>：一个进程至少应该占有一个资源，并等待另一资源，而该资源被其他进程所占有。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>非抢占&lt;/strong>：资源不能被抢占。只能在持有资源的进程完成任务后，该资源才会被释放。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>循环等待&lt;/strong>：有一组等待进程 &lt;code>{P0, P1,..., Pn}&lt;/code>， &lt;code>P0&lt;/code> 等待的资源被 &lt;code>P1&lt;/code> 占有，&lt;code>P1&lt;/code> 等待的资源被 &lt;code>P2&lt;/code> 占有，&amp;hellip;&amp;hellip;，&lt;code>Pn-1&lt;/code> 等待的资源被 &lt;code>Pn&lt;/code> 占有，&lt;code>Pn&lt;/code> 等待的资源被 &lt;code>P0&lt;/code> 占有。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="虚拟内存">虚拟内存&lt;/h3>
&lt;p>&lt;strong>虚拟内存的重要意义是它定义了一个连续的虚拟地址空间&lt;/strong>，并且 &lt;strong>把内存扩展到硬盘空间&lt;/strong>。&lt;/p>
&lt;h3 id="局部性原理">局部性原理&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>时间局部性&lt;/strong> ：如果程序中的某条指令一旦执行，不久以后该指令可能再次执行；如果某数据被访问过，不久以后该数据可能再次被访问。产生时间局部性的典型原因，是由于在程序中存在着大量的循环操作。&lt;/li>
&lt;li>&lt;strong>空间局部性&lt;/strong> ：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，这是因为指令通常是顺序存放、顺序执行的，数据也一般是以向量、数组、表等形式簇聚存储的。&lt;/li>
&lt;/ol></description></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description>&lt;p>java Unsafe 。 sun.misc.Unsafe&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/F556169D09144BED867ADFB7558A8E58.png" alt="" />&lt;/p></description></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description>&lt;h3 id="什么事jmm">什么事JMM&lt;/h3>
&lt;p>JMM 规范明确定义了不同的线程之 间，通过哪些方式，在什么时候可以 看见其他线程保存到共享变量中的 值;以及在必要时，如何对共享变量 的访问进行同步。这样的好处是屏蔽 各种硬件平台和操作系统之间的内存 访问差异，实现了 Java 并发程序真 正的跨平台。&lt;/p></description></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description>&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/image-20211007143642433.png" alt="image-20211007143642433" />&lt;/p>
&lt;h5 id="强引用strongreference">强引用(StrongReference)&lt;/h5>
&lt;p>强引用就是我们平时创建对象，创建数组时的引用。强引用在任何时候都不会被GC回收掉。内存不足，oom&lt;/p>
&lt;h5 id="软引用softreference">软引用(SoftReference)&lt;/h5>
&lt;p>软引用是在系统发生OOM之前才被JVM回收掉。软引用常被用来对于内存敏感的缓存。&lt;/p>
&lt;h5 id="弱引用weakreference">弱引用(WeakReference)&lt;/h5>
&lt;p>一旦JVM执行GC，弱引用就会被回收掉。&lt;/p>
&lt;h5 id="虚引用phantomreference">(虚引用)PhantomReference&lt;/h5>
&lt;p>虚引用主要作为其指向referent被回收时的一种通知机制。&lt;/p>
&lt;h5 id="referencequeue引用队列">ReferenceQueue引用队列&lt;/h5>
&lt;p>用于存放待回收的引用对象（GC 会把引用对象本身添加到这个队列中）&lt;/p>
&lt;p>ReferenceQueue一般用来与SoftReference、WeakReference或者PhantomReference配合使用，将需要关注的引用对象注册到引用队列后，便可以通过监控该队列来判断关注的对象是否被回收，从而执行相应的方法。&lt;/p>
&lt;p>主要使用场景：&lt;/p>
&lt;p>1、使用引用队列进行数据监控，类似前面栗子的用法。&lt;/p>
&lt;p>2、队列监控的反向操作&lt;/p>
&lt;p>参考 &lt;a href="https://www.cnblogs.com/mfrank/p/10104586.html">https://www.cnblogs.com/mfrank/p/10104586.html&lt;/a>&lt;/p></description></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description>&lt;p>Jmstat&lt;/p></description></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description>&lt;p>参考https://zhuanlan.zhihu.com/p/138819184&lt;/p>
&lt;p>用 volatile 修饰共享变量后，每个线程要操作变量时会从主内存中将变量拷贝到本地内存作为副本，当线程操作变量副本并写回主内存后，会通过 &lt;strong>CPU 总线嗅探机制&lt;/strong>告知其他线程该变量副本已经失效，需要重新从主内存中读取。&lt;/p>
&lt;p>volatile 的主要作用有两点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>保证变量的内存可见性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>禁止指令重排序&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description>&lt;h3 id="bio">bio&lt;/h3>
&lt;p>阻塞io&lt;/p>
&lt;p>TCP服务端&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// 启动
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">ServerSocket&lt;/span> &lt;span class="n">serverSocket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ServerSocket&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">8080&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">serverSocket&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isClosed&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Socket&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">serverSocket&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">accept&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//一次请求分配一个线程:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 处理接收到的内容inputStream
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">InputStream&lt;/span> &lt;span class="n">inputStream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInputStream&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">inputStream&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">(...)&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1">// 向客户端发送内容
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">OutputStream&lt;/span> &lt;span class="n">outputStream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getOutputStream&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">outputStream&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(...)&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1">// 关闭
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">serverSocket&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>TCP客户端&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// 启动连接
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Socket&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Socket&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;localhost&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">8080&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 发送内容
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">OutputStream&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getOutputStream&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">outputStream&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(...)&lt;/span>
&lt;span class="c1">// 处理接收的内容inputStream
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">InputStream&lt;/span> &lt;span class="n">inputStream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInputStream&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">inputStream&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">(...)&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="c1">// 关闭客户端
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Udp服务端&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//服务端在3000端口监听接收到的数据
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">DatagramSocket&lt;/span> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DatagramSocket&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">3000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">接收数据&lt;/span>
&lt;span class="n">DatagramPacket&lt;/span> &lt;span class="n">dp_receive&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DatagramPacket&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1024&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">receive&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dp_receive&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">发送数据&lt;/span>
&lt;span class="n">DatagramPacket&lt;/span> &lt;span class="n">dp_send&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DatagramPacket&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">str_send&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBytes&lt;/span>&lt;span class="o">(),&lt;/span>&lt;span class="n">str_send&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">(),&lt;/span>&lt;span class="n">InetAddress&lt;/span> &lt;span class="n">dp_receive&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAddress&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">,&lt;/span>&lt;span class="n">9000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dp_send&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Udp客户端&lt;/p>
&lt;p>和服务端等价，一样的写法&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">DatagramSocket&lt;/span> &lt;span class="n">ds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DatagramSocket&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">9000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="err">。。。&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nio">Nio&lt;/h3>
&lt;p>非阻塞io&lt;/p>
&lt;p>服务端&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="c1">// 1. 创建服务端的channel对象
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">ServerSocketChannel&lt;/span> &lt;span class="n">serverSocketChannel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ServerSocketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">open&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">serverSocketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configureBlocking&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 设置为非阻塞模式
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 2. 创建Selector
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Selector&lt;/span> &lt;span class="n">selector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Selector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">open&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// 3. 把服务端的channel注册到selector，注册accept事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SelectionKey&lt;/span> &lt;span class="n">selectionKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">serverSocketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">selector&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">selectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interestOps&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SelectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OP_ACCEPT&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 4. 绑定端口，启动服务
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">serverSocketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">socket&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">bind&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">InetSocketAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">8080&lt;/span>&lt;span class="o">));&lt;/span> &lt;span class="c1">// 绑定端口
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 5. 启动selector（管家）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">selector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">select&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">// 阻塞，直到事件通知才会返回
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 6，业务处理。 下面分配 subReactor线程处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SelectionKey&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">selectionKeys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">selector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">selectedKeys&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SelectionKey&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">iterator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">selectionKeys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">iterator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasNext&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SelectionKey&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isAcceptable&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SocketChannel&lt;/span> &lt;span class="n">socketChannel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">ServerSocketChannel&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">accept&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configureBlocking&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">selector&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SelectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OP_READ&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;收到新连接：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">socketChannel&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isReadable&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">// 客户端连接有数据可以读时触发
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SocketChannel&lt;/span> &lt;span class="n">socketChannel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SocketChannel&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ByteBuffer&lt;/span> &lt;span class="n">requestBuffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ByteBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">allocate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1024&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isOpen&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 长连接情况下,需要手动判断数据有没有读取结束 (此处做一个简单的判断: 超过0字节就认为请求结束了)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">position&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">position&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 如果没数据了, 则不继续后面的处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flip&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remaining&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;收到数据,来自：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRemoteAddress&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">// TODO 业务操作 数据库 接口调用等等
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 响应结果 200
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;HTTP/1.1 200 OK\r\n&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;Content-Length: 11\r\n\r\n&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">ByteBuffer&lt;/span> &lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ByteBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">wrap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBytes&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasRemaining&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cancel&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="c1">// 1. 创建客户端channel对象
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">SocketChannel&lt;/span> &lt;span class="n">socketChannel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SocketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">open&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configureBlocking&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 2. 创建Selector
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Selector&lt;/span> &lt;span class="n">selector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Selector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">open&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">selector&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SelectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OP_CONNECT&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//3 连接
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">connect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">InetSocketAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;localhost&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">8080&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//4 selector接收事件，
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">selector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">select&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SelectionKey&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">selectionKeys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">selector&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">selectedKeys&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SelectionKey&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">iterator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">selectionKeys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">iterator&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// 5下面需要分配线程处理
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasNext&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SelectionKey&lt;/span> &lt;span class="n">selectionKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">iterator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">selectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isConnectable&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 连接到远程服务器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">finishConnect&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 完成连接
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 连接成功
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;连接成功-&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">socketChannel&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ByteBuffer&lt;/span> &lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ByteBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">allocateDirect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">20480&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 切换到感兴趣的事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">selectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">attach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">selectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interestOps&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SelectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OP_WRITE&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 连接失败
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">selectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isWritable&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">// 可以开始写数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ByteBuffer&lt;/span> &lt;span class="n">buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ByteBuffer&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">selectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">attachment&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">buf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clear&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Scanner&lt;/span> &lt;span class="n">scanner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Scanner&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">in&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;请输入：&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 发送内容
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">msg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scanner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextLine&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scanner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">buf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBytes&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">buf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flip&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasRemaining&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 切换到感兴趣的事件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">selectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interestOps&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SelectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OP_READ&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">selectionKey&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isReadable&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">// 可以开始读数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 读取响应
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;收到服务端响应:&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ByteBuffer&lt;/span> &lt;span class="n">requestBuffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ByteBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">allocate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1024&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isOpen&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">socketChannel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 长连接情况下,需要手动判断数据有没有读取结束 (此处做一个简单的判断: 超过0字节就认为请求结束了)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">position&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flip&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remaining&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;span class="n">requestBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">// selectionKey.interestOps(SelectionKey.OP_WRITE);
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description>&lt;h3 id="线程模型">线程模型&lt;/h3>
&lt;h4 id="nio-多reacto">nio 多reacto&lt;/h4>
&lt;p>参考 &lt;a href="https://www.jianshu.com/p/e0e7cb085fb4">https://www.jianshu.com/p/e0e7cb085fb4&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/F6A1AB8C69F049B5A0178FD00F132D6F.png" alt="" />&lt;/p>
&lt;h4 id="netty线程模型">netty线程模型&lt;/h4>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/BE156EF4454949CF9E6E49CEEC0A2B2D.png" alt="" />&lt;/p>
&lt;p>eventloopgroup eventloop channel handler关系&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/A20B60869216424BA7678D0D5213BFB6.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/227DA0D6B04B41449E83B72ED7098F5A.png" alt="" />&lt;/p>
&lt;h3 id="责任链模型channelpipeline">责任链模型ChannelPipeline&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/2CE502957CF84D2C8429CD2A0E998D54.png" alt="" />&lt;/p>
&lt;p>pipeline 持有context的双链表&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/914EBB37C6084D8A9EA6A105262A45A1.png" alt="" />&lt;/p>
&lt;p>context 持有下一个和上一个context和 handler , 并触发链式调用下一个或者上一个context的hander&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/6F42E200304A47B095E78C10B5246039.png" alt="" />&lt;/p>
&lt;p>handler 自己写的时候，继承适配器即可&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/B154DADDE045400881317E5E571A7AA8.png" alt="" />&lt;/p>
&lt;h3 id="整体结构">整体结构&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/2E7F7EA909664C2989958271D27A09B4.png" alt="" />&lt;/p>
&lt;h3 id="netty-内存管理--bytebuf--pool">netty 内存管理 bytebuf pool&lt;/h3>
&lt;p>&lt;a href="https://people.freebsd.org/~jasone/jemalloc/bsdcan2006/jemalloc.pdf">https://people.freebsd.org/~jasone/jemalloc/bsdcan2006/jemalloc.pdf&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/07723506D21F497FBAE1196D73A7626A.png" alt="" />&lt;/p>
&lt;p>引用计数。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/5562B699C19A4BD69705BBCCE0C3DD93.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://gitee.com/fengzhenbing/picgo/raw/master/E0F2FA0E08C248C6B3A76F770FFB0947.png" alt="" />&lt;/p>
&lt;h3 id="对象回收复用栈">对象回收复用栈&lt;/h3>
&lt;p>&lt;a href="https://www.jianshu.com/p/854b855bd198">https://www.jianshu.com/p/854b855bd198&lt;/a>&lt;/p>
&lt;h3 id="零拷贝">零拷贝&lt;/h3>
&lt;p>netty &lt;a href="https://www.jianshu.com/p/0ab705ae4f2d">https://www.jianshu.com/p/0ab705ae4f2d&lt;/a>&lt;/p>
&lt;p>FileChannel.transferTo() 实现nio的零拷贝&lt;/p>
&lt;p>Netty之ChannelOption参数&lt;/p></description></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description/></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description>&lt;p>总结一下，实现分布式的方式：
1）数据库for update，
2）redis的过期key/redission，
3）zookeeper临时节点，
4）etcd的lease，
5）内存网格hazelcast和ignite的纯java分布式锁。&lt;/p></description></item><item><title/><link>https://fengzhenbing.github.io/p/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/p/</guid><description>&lt;p>Redis作为内存中的数据结构存储，常用作数据库、缓存和消息代理。它支持数据结构，如 字符串，散列，列表，集合，带有范围查询的排序集（sorted sets），位图（bitmaps），超级日志（hyperloglogs），具有半径查询和流的地理空间索引。Redis具有内置复制，Lua脚本，LRU驱逐，事务和不同级别的磁盘持久性，并通过Redis Sentinel和Redis Cluster自动分区。&lt;/p>
&lt;p>为了实现其出色的性能，Redis使用&lt;strong>内存数据集（in-memory dataset）&lt;/strong>。&lt;/p>
&lt;p>MQ应用有很多，比如ActiveMQ,RabbitMQ,Kafka等，但是也可以基于redis来实现，可以降低系统的维护成本和实现复杂度，本篇介绍redis中实现消息队列的几种方案。&lt;/p>
&lt;ul>
&lt;li>基于List的 LPUSH+BRPOP 的实现&lt;/li>
&lt;li>PUB/SUB，订阅/发布模式&lt;/li>
&lt;li>基于Sorted-Set的实现&lt;/li>
&lt;li>基于Stream类型的实现&lt;/li>
&lt;/ul>
&lt;h3 id="基于异步消息队列list-lpush-brpoprpush-blpop">基于异步消息队列List lpush-brpop(rpush-blpop)&lt;/h3>
&lt;p>使用&lt;strong>rpush&lt;/strong>和&lt;strong>lpush&lt;/strong>操作入队列，&lt;strong>lpop&lt;/strong>和&lt;strong>rpop&lt;/strong>操作出队列。&lt;/p>
&lt;p>&lt;strong>List支持多个生产者和消费者并发进出消息&lt;/strong>，每个消费者拿到都是&lt;strong>不同&lt;/strong>的列表元素。&lt;/p>
&lt;p>但是当队列为空时，lpop和rpop会一直空轮训，消耗资源；所以引入阻塞读blpop和brpop（b代表blocking），阻塞读在队列没有数据的时候进入休眠状态，&lt;/p>
&lt;p>一旦数据到来则立刻醒过来，消息延迟几乎为零。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>&lt;/p>
&lt;p>你以为上面的方案很完美？还有个问题需要解决：空闲连接的问题。&lt;/p>
&lt;p>如果线程一直阻塞在那里，Redis客户端的连接就成了闲置连接，闲置过久，服务器一般会主动断开连接，减少闲置资源占用，这个时候blpop和brpop或抛出异常，&lt;/p>
&lt;p>所以在编写客户端消费者的时候要小心，如果捕获到异常，还有重试。&lt;/p>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>做消费者确认ACK麻烦，不能保证消费者消费消息后是否成功处理的问题（宕机或处理异常等），通常需要维护一个Pending列表，保证消息处理确认。&lt;/li>
&lt;li>不能做广播模式，如pub/sub，消息发布/订阅模型&lt;/li>
&lt;li>不能重复消费，一旦消费就会被删除&lt;/li>
&lt;li>不支持分组消费&lt;/li>
&lt;/ul>
&lt;p>如何实现：&lt;a class="link" href="https://mp.weixin.qq.com/s?__biz=MzI2NzMyMDQ0NQ==&amp;amp;mid=100000206&amp;amp;idx=1&amp;amp;sn=5e18a6aa07b43b107041444499eb2c77&amp;amp;chksm=6a81ecdc5df665caead4c7575bbb09ff2d72040b68239581264f3cfa69723397cb0dcbc0da85#rd" target="_blank" rel="noopener"
>Redis应用-异步消息队列与延时队列&lt;/a>&lt;/p>
&lt;h3 id="pubsub订阅发布模式">PUB/SUB,订阅/发布模式&lt;/h3>
&lt;p>SUBSCRIBE，用于订阅信道&lt;/p>
&lt;p>PUBLISH，向信道发送消息&lt;/p>
&lt;p>UNSUBSCRIBE，取消订阅&lt;/p>
&lt;p>此模式允许生产者只生产一次消息，由中间件负责将消息复制到多个消息队列，每个消息队列由对应的消费组消费。&lt;/p>
&lt;p>&lt;strong>优点&lt;/strong>&lt;/p>
&lt;p>典型的广播模式，一个消息可以发布到多个消费者&lt;/p>
&lt;p>多信道订阅，消费者可以同时订阅多个信道，从而接收多类消息&lt;/p>
&lt;p>消息即时发送，消息不用等待消费者读取，消费者会自动接收到信道发布的消息&lt;/p>
&lt;p>&lt;strong>缺点&lt;/strong>&lt;/p>
&lt;p>消息一旦发布，不能接收。换句话就是发布时若客户端不在线，则消息丢失，不能寻回&lt;/p>
&lt;p>不能保证每个消费者接收的时间是一致的&lt;/p>
&lt;p>若消费者客户端出现消息积压，到一定程度，会被强制断开，导致消息意外丢失。通常发生在消息的生产远大于消费速度时&lt;/p>
&lt;p>*&lt;strong>可见，Pub/Sub 模式不适合做消息存储，消息积压类的业务，而是擅长处理广播，即时通讯，即时反馈的业务。*&lt;/strong>&lt;/p>
&lt;h3 id="基于sorted-set的实现">基于Sorted-Set的实现&lt;/h3>
&lt;p>Sortes Set(有序列表)，类似于java的SortedSet和HashMap的结合体，一方面她是一个set，保证内部value的唯一性，另一方面它可以给每个value赋予一个score，代表这个value的&lt;/p>
&lt;p>排序权重。内部实现是“跳跃表”。&lt;/p>
&lt;p>有序集合的方案是在自己确定消息顺ID时比较常用，使用集合成员的Score来作为消息ID，保证顺序，还可以保证消息ID的单调递增。通常可以使用时间戳+序号的方案。确保了消息ID的单调递增，利用SortedSet的依据&lt;/p>
&lt;p>Score排序的特征，就可以制作一个有序的消息队列了。&lt;/p>
&lt;p>&lt;strong>优点&lt;/strong>&lt;/p>
&lt;p>就是可以自定义消息ID，在消息ID有意义时，比较重要。&lt;/p>
&lt;p>&lt;strong>缺点&lt;/strong>&lt;/p>
&lt;p>缺点也明显，不允许重复消息（因为是集合），同时消息ID确定有错误会导致消息的顺序出错。&lt;/p>
&lt;h3 id="基于stream类型的实现">基于Stream类型的实现&lt;/h3>
&lt;p>Redis5.0&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/19397245-2683b998ae2949c5.jpg" alt="img" />&lt;/p>
&lt;p>Stream为redis 5.0后新增的数据结构。支持多播的可持久化消息队列，实现借鉴了Kafka设计。&lt;/p>
&lt;p>Redis Stream的结构如上图所示，&lt;strong>它有一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的ID和对应的内容&lt;/strong>。&lt;strong>消息是持久化的&lt;/strong>，Redis重启后，内容还在。&lt;/p>
&lt;p>每个Stream都有唯一的名称，它就是Redis的key，在我们&lt;strong>首次使用xadd指令追加消息时自动创建&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>每个Stream都可以挂多个消费组，每个消费组会有个游标last_delivered_id在Stream数组之上往前移动，表示当前消费组已经消费到哪条消息了&lt;/strong>。每个消费组都有一个Stream内唯一的名称，消费组不会自动创建，它需要单独的指令xgroup create进行创建，需要指定从Stream的某个消息ID开始消费，这个ID用来初始化last_delivered_id变量。&lt;/p>
&lt;p>每个消费组(Consumer Group)的状态都是独立的，相互不受影响。也就是说&lt;strong>同一份Stream内部的消息会被每个消费组都消费到&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>同一个消费组(Consumer Group)可以挂接多个消费者(Consumer)，这些消费者之间是竞争关系&lt;/strong>，任意一个消费者读取了消息都会使游标last_delivered_id往前移动。每个消费者者有一个组内唯一名称。&lt;/p>
&lt;p>消费者(Consumer)内部会有个状态变量&lt;strong>pending_ids&lt;/strong>，它记录了当前已经被客户端读取的消息，但是还没有ack。如果客户端没有ack，这个变量里面的消息ID会越来越多，一旦某个消息被ack，它就开始减少。这个pending_ids变量在Redis官方被称之为PEL，也就是Pending Entries List，这是一个很核心的数据结构，它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢失了没处理。&lt;/p>
&lt;p>&lt;strong>增删改查&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>xadd &lt;strong>追加消息&lt;/strong>&lt;/li>
&lt;li>xdel 删除消息，这里的删除仅仅是设置了标志位，不影响消息总长度&lt;/li>
&lt;li>xrange &lt;strong>获取消息列表&lt;/strong>，会自动过滤已经删除的消息&lt;/li>
&lt;li>xlen 消息长度&lt;/li>
&lt;li>del 删除Stream&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>独立消费&lt;/strong>&lt;/p>
&lt;p>我们可以在不定义消费组的情况下进行Stream消息的独立消费，当Stream没有新消息时，甚至可以阻塞等待。Redis设计了一个单独的消费指令xread，可以将Stream当成普通的消息队列(list)来使用。使用xread时，我们可以完全忽略消费组(Consumer Group)的存在，就好比Stream就是一个普通的列表(list)。&lt;/p>
&lt;p>&lt;strong>创建消费组&lt;/strong>&lt;/p>
&lt;p>Stream通过xgroup create指令创建消费组(Consumer Group)，需要传递起始消息ID参数用来初始化last_delivered_id变量。&lt;/p>
&lt;p>&lt;strong>消费&lt;/strong>&lt;/p>
&lt;p>Stream提供了xreadgroup指令可以进行消费组的组内消费，需要提供消费组名称、消费者名称和起始消息ID。它同xread一样，也可以阻塞等待新消息。读到新消息后，对应的消息ID就会进入消费者的PEL(正在处理的消息)结构里，客户端处理完毕后使用xack指令通知服务器，本条消息已经处理完毕，该消息ID就会从PEL中移除。&lt;/p>
&lt;p>Stream消息太多怎么办&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/19397245-f5b35dbda2281ac7.jpg" alt="img" />&lt;/p>
&lt;p>读者很容易想到，要是消息积累太多，Stream的链表岂不是很长，内容会不会爆掉就是个问题了。xdel指令又不会删除消息，它只是给消息做了个标志位。&lt;/p>
&lt;p>Redis自然考虑到了这一点，所以它提供了一个定长Stream功能。在xadd的指令提供一个定长长度maxlen，就可以将老的消息干掉，确保最多不超过指定长度。&lt;/p>
&lt;blockquote>
&lt;p>127.0.0.1:6379&amp;gt; xlen codehole&lt;/p>
&lt;p>(integer) 5&lt;/p>
&lt;p>127.0.0.1:6379&amp;gt; xadd codehole maxlen 3 * name xiaorui age 1&lt;/p>
&lt;p>1527855160273-0&lt;/p>
&lt;p>127.0.0.1:6379&amp;gt; xlen codehole&lt;/p>
&lt;p>(integer) 3&lt;/p>
&lt;/blockquote>
&lt;p>我们看到Stream的长度被砍掉了。&lt;/p>
&lt;p>&lt;strong>消息如果忘记ACK会怎样？&lt;/strong>&lt;/p>
&lt;p>Stream在每个消费者结构中保存了正在处理中的消息ID列表PEL，如果消费者收到了消息处理完了但是没有回复ack，就会导致PEL列表不断增长，如果有很多消费组的话，那么这个PEL占用的内存就会放大。&lt;/p>
&lt;p>&lt;strong>PEL如何避免消息丢失？&lt;/strong>&lt;/p>
&lt;p>在客户端消费者读取Stream消息时，Redis服务器将消息回复给客户端的过程中，客户端突然断开了连接，消息就丢失了。但是PEL里已经保存了发出去的消息ID。待客户端重新连上之后，可以再次收到PEL中的消息ID列表。不过此时xreadgroup的起始消息必须是任意有效的消息ID，一般将参数设为0-0，表示读取所有的PEL消息以及自last_delivered_id之后的新消息。&lt;/p>
&lt;p>&lt;strong>分区Partition&lt;/strong>&lt;/p>
&lt;p>Redis没有原生支持分区的能力，想要使用分区，需要分配多个Stream，然后在客户端使用一定的策略来讲消息放入不同的stream。&lt;/p>
&lt;p>&lt;strong>结论&lt;/strong>&lt;/p>
&lt;p>Stream的消费模型借鉴了kafka的消费分组的概念，它弥补了Redis Pub/Sub不能持久化消息的缺陷。但是它又不同于kafka，kafka的消息可以分partition，而Stream不行。如果非要分parition的话，得在客户端做，提供不同的Stream名称，对消息进行hash取模来选择往哪个Stream里塞。如果读者稍微研究过Redis作者的另一个开源项目Disque的话，这极可能是作者意识到Disque项目的活跃程度不够，所以将Disque的内容移植到了Redis里面。&lt;/p>
&lt;p>参考文章：&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/-wenli/p/12777703.html">https://www.cnblogs.com/-wenli/p/12777703.html&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fenmotech%2Farticle%2Fdetails%2F81230531" target="_blank" rel="noopener"
>https://blog.csdn.net/enmotech/article/details/81230531&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.hellokang.net%2Fredis%2Fmessage-queue-by-redis.html" target="_blank" rel="noopener"
>http://www.hellokang.net/redis/message-queue-by-redis.html&lt;/a>&lt;/p></description></item></channel></rss>